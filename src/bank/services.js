// ============================================================================
// services.js ‚Äî –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: –¥–∞–Ω–Ω—ã–µ, —Ä–∞—Å—á—ë—Ç—ã, —É—Ç–∏–ª–∏—Ç—ã
// ============================================================================

import { counterPrefixMap } from './config.js';
import {
  REGEX,
  TEXT_MESSAGES,
  FORM_GIFT_DISCOUNT,
  FORM_PERSONAL_COUPON,
  toSelector
} from './constants.js';
import {
  pad2,
  formatNumber,
  parseNumericAmount,
  roundNewToAnchorDOM,
  fullMonthsDiffVirtualDOM,
  fmtYMD
} from './utils.js';
import { autoDiscounts, autoPriceAdjustments } from './data.js';

// –†–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export {
  pad2,
  formatNumber,
  parseNumericAmount,
  roundNewToAnchorDOM,
  fullMonthsDiffVirtualDOM,
  fmtYMD
};

// ============================================================================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ============================================================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)
 */
export function showNotification(message, duration = 3000) {
  // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
  let container = document.getElementById('notification-container');
  if (!container) {
    container = document.createElement('div');
    container.id = 'notification-container';
    container.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10000;
      display: flex;
      flex-direction: column;
      gap: 10px;
      max-width: 400px;
    `;
    document.body.appendChild(container);
  }

  // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.style.cssText = `
    background: #333;
    color: #fff;
    padding: 12px 20px;
    border-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    font-size: 14px;
    line-height: 1.4;
    animation: slideIn 0.3s ease-out;
    opacity: 0;
    transform: translateX(100%);
  `;
  notification.textContent = message;

  // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
  if (!document.getElementById('notification-styles')) {
    const style = document.createElement('style');
    style.id = 'notification-styles';
    style.textContent = `
      @keyframes slideIn {
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }
      @keyframes slideOut {
        from {
          opacity: 1;
          transform: translateX(0);
        }
        to {
          opacity: 0;
          transform: translateX(100%);
        }
      }
    `;
    document.head.appendChild(style);
  }

  container.appendChild(notification);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  requestAnimationFrame(() => {
    notification.style.animation = 'slideIn 0.3s ease-out forwards';
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ duration –º—Å
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease-in forwards';
    setTimeout(() => {
      notification.remove();
      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
      if (container.children.length === 0) {
        container.remove();
      }
    }, 300);
  }, duration);
}

// ============================================================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ‚Äî —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –∑–∞–ø–∏—Å–µ–π
// ============================================================================

export const submissionGroups = [];
export let groupSeq = 0;
export let entrySeq = 0;

// –õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π)
export const editLogs = [];

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ IS_ADMIN_TO_EDIT === true)
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
 */
export function addEditLog(message) {
  if (typeof window.IS_ADMIN_TO_EDIT !== 'undefined' && window.IS_ADMIN_TO_EDIT === true) {
    // –ï—Å–ª–∏ textarea —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ –Ω–µ—ë (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    const editLogsField = document.getElementById('edit-logs-field');
    if (editLogsField) {
      const currentText = editLogsField.value;
      const newText = currentText ? `${currentText}\n${message}` : message;
      editLogsField.value = newText;

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ editLogs –∏–∑ textarea (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
      editLogs.length = 0;
      editLogs.push(...newText.split('\n'));

      console.log('üìù –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω –≤ textarea):', message);
    } else {
      // –ï—Å–ª–∏ textarea –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
      editLogs.push(message);
      console.log('üìù –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤):', message);
    }
  }
}

// –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backup
// - null = –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ autoDiscounts (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
// - array = –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏ (—Ä–µ–∂–∏–º backup - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
// frozenDiscounts –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤—Å—ë –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è backup –∏ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞–∂–∞—Ç–∏—è "–ö—É–ø–∏—Ç—å"
export let frozenDiscounts = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–∂–∞—Ç–∏–µ "–ö—É–ø–∏—Ç—å")
export function resetFrozenDiscounts() {
  frozenDiscounts = null;
  console.log('‚ùÑÔ∏è‚û°Ô∏èüîì –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
}

// –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã
// –ú–∞—Å—Å–∏–≤ ID –∫—É–ø–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
export const selectedPersonalCoupons = [];

export const buildGroupKey = ({ templateSelector = '', giftId = '' }) => {
  // –î–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º templateSelector + giftId
  if (giftId) {
    return [templateSelector, giftId].join('||');
  }
  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ templateSelector
  return templateSelector;
};

export function incrementGroupSeq() {
  groupSeq += 1;
  return groupSeq;
}

export function incrementEntrySeq() {
  entrySeq += 1;
  return entrySeq;
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ backup –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} backupData - –æ–±—ä–µ–∫—Ç —Å fullData –∏–∑ JSON
 */
export function restoreFromBackup(backupData) {
  if (!backupData || !backupData.fullData) {
    throw new Error('Invalid backup data: missing fullData');
  }

  console.log('üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup:', backupData);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π IS_ADMIN_TO_EDIT –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ ENVIRONMENT
  window.IS_ADMIN_TO_EDIT = window.IS_ADMIN_TO_EDIT;
  console.log('üíæ IS_ADMIN_TO_EDIT —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', window.IS_ADMIN_TO_EDIT);

  // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  editLogs.length = 0;

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ backup (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
  if (backupData.environment) {
    console.log('üåç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const env = backupData.environment;

    // –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    const skipVariables = [
      'USERS_LIST',
      'ALLOWED_PARENTS',
      'BASE_URL',
      'BACKUP_DATA',
      'COMMENT_ID',
      'COMMENT_AUTHOR_ID',
      'COMMENT_AUTHOR_NAME',
      'CURRENT_BANK'
    ];

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    Object.keys(env).forEach(key => {
      if (skipVariables.includes(key)) {
        console.log(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)`);
        return;
      }

      let value = env[key];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "undefined" –≤ —Ä–µ–∞–ª—å–Ω—ã–π undefined
      if (value === 'undefined') {
        value = undefined;
      }

      window[key] = value;
      console.log(`  ‚úÖ ${key} = ${value === undefined ? 'undefined' : JSON.stringify(value)}`);
    });
  }

  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  submissionGroups.length = 0;

  // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã (–±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ backup)
  selectedPersonalCoupons.length = 0;

  // –°–æ–±–∏—Ä–∞–µ–º ID –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–∑ backup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const backupAdjustmentIds = new Set();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ backup (–ö–†–û–ú–ï –°–ö–ò–î–û–ö - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã)
  backupData.fullData.forEach((operation) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (operation.type === 'discount') {
      console.log('üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –∏–∑ backup (–±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞):', operation.title);
      return;
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã
    if (operation.type === 'coupon') {
      console.log('üé´ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–æ–≤ –∏–∑ backup:', operation);
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É–ø–æ–Ω–æ–≤ –∏–∑ entries
      operation.entries.forEach((entry) => {
        const couponId = entry.data?.coupon_id;
        if (couponId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É–ø–æ–Ω –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
          const activeCoupons = getActivePersonalCoupons();
          const coupon = activeCoupons.find(c => c.id === couponId);

          if (coupon) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–æ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
            if (!selectedPersonalCoupons.includes(couponId)) {
              selectedPersonalCoupons.push(couponId);
              console.log(`‚úÖ –ö—É–ø–æ–Ω "${coupon.title}" (ID: ${couponId}) –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }
          } else {
            console.log(`‚ö†Ô∏è –ö—É–ø–æ–Ω —Å ID ${couponId} –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∏—Å—Ç—ë–∫ –∏–ª–∏ —É–¥–∞–ª—ë–Ω)`);
          }
        }
      });
      // –ù–µ —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫—É–ø–æ–Ω–æ–≤ - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ updatePersonalCoupons
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
    const group = {
      id: `group-${incrementGroupSeq()}`,
      templateSelector: operation.form_id ? `#${operation.form_id}` : '',
      title: operation.title,
      price: operation.price || 0,
      bonus: operation.bonus || 0,
      mode: operation.mode,
      kind: operation.kind,  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º kind (income/expense)
      amountLabel: operation.amountLabel || '–°—É–º–º–∞',
      entries: []
    };

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
    if (operation.giftId) {
      group.giftId = operation.giftId;
    }
    if (operation.giftIcon) {
      group.giftIcon = operation.giftIcon;
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º amount –Ω–∞ –æ—Å–Ω–æ–≤–µ price, bonus –∏ mode (–î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞!)
    if (operation.price !== undefined && operation.price !== null) {
      if (operation.bonus && operation.mode === 'price_per_item_w_bonus') {
        group.amount = `${operation.price} + x${operation.bonus}`;
      } else if (operation.bonus) {
        group.amount = `${operation.price} + x${operation.bonus}`;
      } else {
        group.amount = String(operation.price);
      }
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π key —á–µ—Ä–µ–∑ buildGroupKey (—Å amount!)
    group.key = buildGroupKey({
      templateSelector: group.templateSelector,
      title: group.title,
      amount: group.amount || '',
      amountLabel: group.amountLabel,
      kind: group.kind || '',
      giftId: group.giftId || ''
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    if (operation.type === 'adjustment') {
      group.isPriceAdjustment = true;
      // –°–æ–±–∏—Ä–∞–µ–º ID –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–∑ backup
      operation.entries.forEach((entry) => {
        if (entry.key && typeof entry.key === 'string') {
          const adjustmentId = entry.key.split('_').pop();
          if (adjustmentId) backupAdjustmentIds.add(adjustmentId);
        }
      });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
    operation.entries.forEach((entry) => {
      const restoredEntry = {
        id: `entry-${incrementEntrySeq()}`,
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π template_id = form_id, –¥–ª—è —Å–∫–∏–¥–æ–∫/–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –±–µ—Ä—ë–º –∏–∑ entry
        template_id: entry.template_id || operation.form_id,
        key: entry.key || group.key,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º entry.key –∏–ª–∏ group.key –∫–∞–∫ fallback
        data: entry.data || {},
        multiplier: entry.multiplier || 1
      };

      group.entries.push(restoredEntry);
    });

    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', {
      id: group.id,
      key: group.key,
      title: group.title,
      entries: group.entries.length,
      firstEntry: group.entries[0]
    });

    submissionGroups.push(group);
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ USERS_LIST
  if (typeof window.USERS_LIST !== 'undefined' && Array.isArray(window.USERS_LIST)) {
    const validUserIds = new Set(window.USERS_LIST.map(u => String(u.id)));

    // –°–ø–∏—Å–æ–∫ form_id, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const recipientForms = [
      'form-income-anketa', 'form-income-akcion', 'form-income-needchar',
      'form-income-episode-of', 'form-income-post-of', 'form-income-writer',
      'form-income-activist', 'form-income-topup', 'form-income-ams',
      'form-exp-transfer',
      'form-exp-bonus1d1', 'form-exp-bonus2d1', 'form-exp-bonus1w1', 'form-exp-bonus2w1',
      'form-exp-bonus1m1', 'form-exp-bonus2m1', 'form-exp-bonus1m3', 'form-exp-bonus2m3',
      'form-exp-mask', 'form-exp-clean',
      'form-gift-custom', 'form-gift-present',
      'form-icon-custom', 'form-icon-present',
      'form-badge-custom', 'form-badge-present',
      'form-bg-custom', 'form-bg-present'
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (let i = submissionGroups.length - 1; i >= 0; i--) {
      const group = submissionGroups[i];
      const formId = group.templateSelector?.replace('#', '');

      if (recipientForms.includes(formId)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–π entry
        let hasValidRecipient = false;

        for (const entry of group.entries) {
          const data = entry.data || {};
          const recipientKeys = Object.keys(data).filter(k => /^recipient_\d+$/.test(k));

          for (const key of recipientKeys) {
            const recipientId = String(data[key] || '').trim();
            if (recipientId && validUserIds.has(recipientId)) {
              hasValidRecipient = true;
              break;
            }
          }

          if (hasValidRecipient) break;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —É–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if (!hasValidRecipient) {
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${group.title} (${formId})`);
          submissionGroups.splice(i, 1);
        }
      }
    }
  }

  const restoredCount = submissionGroups.length;
  console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredCount} –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ backup`);
  console.log('üìã submissionGroups:', submissionGroups);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–≤–µ—á–Ω—ã–µ) –∏ —Å–∫–∏–¥–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞)
  let newAdjustmentsCount = 0;
  let historicalDiscountsCount = 0;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ backup)
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–∑ backup
  const adjustmentsFromBackup = submissionGroups.filter(g => g.isPriceAdjustment);

  // –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫, —á—Ç–æ–±—ã updateAutoPriceAdjustments —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—É—é
  const backupAdjustmentGroup = adjustmentsFromBackup.length > 0 ? adjustmentsFromBackup[0] : null;
  if (backupAdjustmentGroup) {
    const index = submissionGroups.indexOf(backupAdjustmentGroup);
    submissionGroups.splice(index, 1);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  updateAutoPriceAdjustments();

  const currentAdjustments = submissionGroups.filter(g => g.isPriceAdjustment);

  // –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ –≤ backup, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–º–∏
  // –ï—Å–ª–∏ –±—ã–ª–∏, —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
  newAdjustmentsCount = backupAdjustmentGroup ? (currentAdjustments.length > 0 ? 1 : 0) : currentAdjustments.length;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã (–≤—Å–µ 3 —Ñ–∞–∑—ã)
  if (selectedPersonalCoupons.length > 0) {
    console.log(`üé´ –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã (${selectedPersonalCoupons.length} —à—Ç.)`);
    updatePersonalCoupons('item');   // –§–∞–∑–∞ 1: item –∫—É–ø–æ–Ω—ã (–¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã)
    updatePersonalCoupons('fixed');  // –§–∞–∑–∞ 2: fixed –∫—É–ø–æ–Ω—ã (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫)
    updatePersonalCoupons('percent'); // –§–∞–∑–∞ 3: percent –∫—É–ø–æ–Ω—ã (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏ fixed)
    console.log(`‚úÖ –ö—É–ø–æ–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã`);
  }

  // –ü–æ–ª—É—á–∞–µ–º timestamp –∏–∑ backup'–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
  const backupTimestamp = backupData.timestamp;

  if (backupTimestamp) {
    console.log(`üìÖ Backup timestamp: ${backupTimestamp}`);

    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï —Å–∫–∏–¥–∫–∏ –∏–∑ autoDiscounts, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞
    frozenDiscounts = autoDiscounts.filter(discount => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞
      return wasDiscountActiveAt(discount, backupTimestamp);
    });

    console.log(`‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ ${frozenDiscounts.length} —Å–∫–∏–¥–æ–∫, –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞:`, frozenDiscounts.map(d => d.id));

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏
    updateAutoDiscounts();

    const appliedDiscounts = submissionGroups.filter(g => g.isDiscount);
    historicalDiscountsCount = appliedDiscounts.length;

    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${historicalDiscountsCount} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫`);
  } else {
    console.warn('‚ö†Ô∏è Backup –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç timestamp, —Å–∫–∏–¥–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª');
    frozenDiscounts = null;
  }

  if (newAdjustmentsCount > 0 || historicalDiscountsCount > 0) {
    console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: –Ω–æ–≤—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ - ${newAdjustmentsCount}, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫ - ${historicalDiscountsCount}`);
  }
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–µ
// ============================================================================

export function formatEntryKey(key) {
  if (key === 'quantity') return TEXT_MESSAGES.QUANTITY_LABEL;
  if (key === 'reason') return TEXT_MESSAGES.COMMENT_LABEL;

  const recipientMatch = key.match(REGEX.RECIPIENT);
  if (recipientMatch) return recipientMatch[1] === '1' ? TEXT_MESSAGES.RECIPIENT_LABEL : `${TEXT_MESSAGES.RECIPIENT_LABEL} ${recipientMatch[1]}`;

  const fromMatch = key.match(REGEX.FROM);
  if (fromMatch) return fromMatch[1] === '1' ? TEXT_MESSAGES.FROM_LABEL : `${TEXT_MESSAGES.FROM_LABEL} ${fromMatch[1]}`;

  const wishMatch = key.match(REGEX.WISH);
  if (wishMatch) return wishMatch[1] === '1' ? TEXT_MESSAGES.COMMENT_LABEL : `${TEXT_MESSAGES.COMMENT_LABEL} ${wishMatch[1]}`;

  const counterMatch = key.match(REGEX.COUNTER);
  if (counterMatch) {
    const [, prefix, suffix] = counterMatch;
    const cfg = counterPrefixMap[prefix];
    if (cfg) {
      if (suffix === 'old') return '–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      if (suffix === 'new') return '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      if (suffix === 'rounded')
        return cfg.prefix === 'month'
          ? '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—É—Å–ª–æ–≤–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)'
          : '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–æ)';
      if (suffix === 'diff') return cfg.logDiffLabel || '–ù–æ–≤—ã–π —É—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º';
    }
  }
  return key;
}

// ============================================================================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–ö–ò–î–ö–ò
// ============================================================================

// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –∑–∞–ø–∏—Å–µ–π
function calculateGroupCost(group) {
  let total = 0;

  const mode = group.mode || 'price_per_item';
  const price = Number(group.price) || 0;
  const bonus = Number(group.bonus) || 0;

  group.entries.forEach(entry => {
    const dataObj = entry.data || {};
    const multiplier = Number(entry.multiplier) || 1;

    // –ü–æ–¥—Å—á—ë—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
    const recipientCount = recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;

    // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ quantity_N (–¥–ª—è —Ñ–æ—Ä–º —Ç–∏–ø–∞ —Å–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∂–∏–ª–µ—Ç)
    const quantityKeys = Object.keys(dataObj).filter(k => /^quantity_\d+$/.test(k));
    let totalQuantity = 0;
    quantityKeys.forEach(key => {
      const idx = key.match(/^quantity_(\d+)$/)[1];
      const recipientKey = `recipient_${idx}`;
      // –£—á–∏—Ç—ã–≤–∞–µ–º quantity —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å
      if (String(dataObj[recipientKey] || '').trim()) {
        totalQuantity += Number(dataObj[key]) || 0;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª–µ quantity (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞)
    if (totalQuantity === 0 && dataObj.quantity) {
      totalQuantity = Number(dataObj.quantity) || 0;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å quantity - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const items = totalQuantity > 0 ? totalQuantity : recipientCount;

    // –ü–æ–¥—Å—á—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ç—ã—Å—è—á–∏)
    const thousandKeys = Object.keys(dataObj).filter(k => /^thousand_\d+$/.test(k));
    const additional_items = thousandKeys.reduce((sum, key) => {
      return sum + (Number(dataObj[key]) || 0);
    }, 0);

    // –í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞
    let entered_amount = 0;
    if (dataObj.amount) {
      entered_amount = parseNumericAmount(String(dataObj.amount));
    }

    // –î–ª—è —Ñ–æ—Ä–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ - —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ amount_N –∑–Ω–∞—á–µ–Ω–∏—è
    const amountKeys = Object.keys(dataObj).filter(k => /^amount_\d+$/.test(k));
    if (amountKeys.length > 0) {
      entered_amount = amountKeys.reduce((sum, key) => {
        const idx = key.match(/^amount_(\d+)$/)[1];
        const recipientKey = `recipient_${idx}`;
        // –£—á–∏—Ç—ã–≤–∞–µ–º amount —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if (String(dataObj[recipientKey] || '').trim()) {
          return sum + (parseNumericAmount(String(dataObj[key] || '0')));
        }
        return sum;
      }, 0);
    }

    // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let entryCost = 0;
    switch (mode) {
      case 'price_per_item':
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º 1 –µ–¥–∏–Ω–∏—Ü—É (–¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        entryCost = price * (items > 0 ? items : 1);
        break;
      case 'price_per_item_w_bonus':
        entryCost = price * (items > 0 ? items : 1) + bonus * additional_items;
        break;
      case 'entered_amount':
        entryCost = entered_amount;
        break;
      case 'price_w_entered_amount':
        entryCost = entered_amount + price * (items > 0 ? items : 1);
        break;
      default:
        entryCost = 0;
    }
    
    total += entryCost * multiplier;
  });

  return total;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)
 * @param {string} expiresAt - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' (—Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —ç—Ç–æ–≥–æ –¥–Ω—è)
 * @returns {boolean} - true, –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
 */
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —Å–∫–∏–¥–∫–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
 * @param {string} startDate - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å (—Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è >= startDate 00:00:00)
 */
function isDiscountStarted(startDate) {
  if (!startDate) return false;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const now = new Date();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è (00:00:00) –∫ –¥–∞—Ç–µ
  const startDateString = `${startDate}T00:00:00`;

  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
  const startDateObj = new Date(startDateString);

  // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è = UTC+3
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
  const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  const localOffset = now.getTimezoneOffset(); // —Å–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC –≤ –º–∏–Ω—É—Ç–∞—Ö
  const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60 * 1000);

  return moscowTime >= startDateObj;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
 * @param {string} expiresAt - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ (—Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è >= expiresAt 23:59:59)
 */
function isDiscountExpired(expiresAt) {
  if (!expiresAt) return false;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const now = new Date();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –¥–Ω—è (23:59:59) –∫ –¥–∞—Ç–µ
  const expiryDateString = `${expiresAt}T23:59:59`;

  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
  const expiryDate = new Date(expiryDateString);

  // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è = UTC+3
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
  const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  const localOffset = now.getTimezoneOffset(); // —Å–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤–æ—Å—Ç–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤)
  const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60 * 1000);

  return moscowTime >= expiryDate;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
 * @param {Object} discount - –æ–±—ä–µ–∫—Ç —Å–∫–∏–¥–∫–∏ —Å –ø–æ–ª—è–º–∏ startDate –∏ expiresAt
 * @param {string} timestamp - ISO 8601 timestamp (UTC)
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
 */
function wasDiscountActiveAt(discount, timestamp) {
  if (!timestamp) return false;

  // timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (Unix timestamp), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  const ts = new Date(timestamp * 1000);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º startDate
  if (discount.startDate) {
    const startDateString = `${discount.startDate}T00:00:00`;
    const startDateObj = new Date(startDateString);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const localOffset = ts.getTimezoneOffset();
    const tsMoscow = new Date(ts.getTime() + (moscowOffset + localOffset) * 60 * 1000);

    if (tsMoscow < startDateObj) return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º expiresAt
  if (discount.expiresAt) {
    const expiryDateString = `${discount.expiresAt}T23:59:59`;
    const expiryDate = new Date(expiryDateString);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const localOffset = ts.getTimezoneOffset();
    const tsMoscow = new Date(ts.getTime() + (moscowOffset + localOffset) * 60 * 1000);

    if (tsMoscow > expiryDate) return false;
  }

  return true;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–∏–¥–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
 * @param {Object} rule - –ø—Ä–∞–≤–∏–ª–æ —Å–∫–∏–¥–∫–∏
 * @param {Array} groups - –º–∞—Å—Å–∏–≤ submissionGroups
 * @returns {Object|null} - –æ–±—ä–µ–∫—Ç —Å discount, calculation, totalItems –∏–ª–∏ null –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞
 */
function calculateDiscountForRule(rule, groups) {
  let { id, title, forms, type, discountValue, condition, startDate, expiresAt } = rule;

  // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 100
  if (type === 'percent' && discountValue > 100) {
    discountValue = 100;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ
  const matchingGroups = groups.filter(g => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    if (g.isDiscount || g.isPriceAdjustment) return false;
    // –î–ª—è 'all' –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (kind === 'expense')
    if (forms === 'all') return g.kind === 'expense';
    return forms.includes(g.templateSelector);
  });

  if (matchingGroups.length === 0) return null;

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  let totalItems = 0;
  matchingGroups.forEach(group => {
    group.entries.forEach(entry => {
      const dataObj = entry.data || {};
      const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
      totalItems += recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;
    });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
  let conditionMet = false;
  if (condition.type === 'none') {
    conditionMet = true;
  } else if (condition.type === 'min_items') {
    conditionMet = totalItems >= condition.value;
  }

  // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º totalItems > 0, —Ç.–∫. —Å—á–∏—Ç–∞–µ–º –ø–æ —Å—É–º–º–∞–º
  if (!conditionMet) return null;
  if (totalItems === 0 && type !== 'percent') return null;

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–∏–¥–∫–∏)
  let operationTotal = 0;
  matchingGroups.forEach(group => {
    const groupCost = calculateGroupCost(group);
    operationTotal += Math.abs(groupCost);
  });

  // –í—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const couponGroup = groups.find(g => g.isPersonalCoupon);
  if (couponGroup) {
    couponGroup.entries.forEach(entry => {
      const couponForm = entry.data?.form;
      if (matchingGroups.some(g => g.templateSelector === toSelector(couponForm))) {
        const discountAmount = Number(entry.data?.discount_amount) || 0;
        operationTotal -= discountAmount;
      }
    });
  }

  // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const adjustmentGroup = groups.find(g => g.isPriceAdjustment);
  if (adjustmentGroup) {
    adjustmentGroup.entries.forEach(entry => {
      const adjustmentForm = entry.data?.form;
      if (matchingGroups.some(g => g.templateSelector === adjustmentForm)) {
        const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
        operationTotal -= adjustmentAmount;
      }
    });
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  let discount = 0;
  let calculation = '';

  if (type === 'per_item') {
    // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    discount = discountValue * totalItems;
    calculation = `${discountValue} √ó ${totalItems}`;
  } else if (type === 'per_batch') {
    // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const { batchSize = 1 } = rule;
    const batches = Math.floor(totalItems / batchSize);
    discount = discountValue * batches;
    calculation = `${discountValue} √ó ${batches}`;
  } else if (type === 'fixed') {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
    discount = discountValue;
    calculation = String(discountValue);
  } else if (type === 'percent') {
    // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
    discount = operationTotal * (discountValue / 100);
    // –í—Å–µ–≥–¥–∞ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    discount = Math.ceil(discount);
    calculation = `${formatNumber(operationTotal)} √ó ${discountValue}%`;
  }

  // –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º
  if (discount > operationTotal) {
    discount = operationTotal;
  }

  if (discount <= 0) return null;

  return { discount, calculation, totalItems };
}

export function updateAutoDiscounts() {
  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å–∫–∏–¥–æ–∫
  const discountKey = buildGroupKey({
    templateSelector: FORM_GIFT_DISCOUNT,
    title: TEXT_MESSAGES.AUTO_DISCOUNTS_TITLE,
    amount: '',
    amountLabel: TEXT_MESSAGES.DISCOUNT_LABEL,
    kind: 'income'
  });

  const discountGroupIndex = submissionGroups.findIndex(g => g.key === discountKey);
  const entries = [];
  let totalDiscount = 0;
  let accumulatedDiscounts = 0; // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–≤—Ç–æ—Å–∫–∏–¥–æ–∫

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º frozenDiscounts –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–µ–∂–∏–º backup), –∏–Ω–∞—á–µ autoDiscounts
  const discountsToApply = frozenDiscounts !== null ? frozenDiscounts : autoDiscounts;

  console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏ –∏–∑ ${frozenDiscounts !== null ? '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞' : '—Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª'} (${discountsToApply.length} –ø—Ä–∞–≤–∏–ª)`);

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ "–≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"
  const specificFormRules = discountsToApply.filter(rule => {
    if (!rule.startDate || isDiscountExpired(rule.expiresAt) || !isDiscountStarted(rule.startDate)) {
      return false;
    }
    return rule.forms !== 'all';
  });

  const allFormsRules = discountsToApply.filter(rule => {
    if (!rule.startDate || isDiscountExpired(rule.expiresAt) || !isDiscountStarted(rule.startDate)) {
      return false;
    }
    return rule.forms === 'all';
  });

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const allRulesToApply = [...specificFormRules, ...allFormsRules];

  console.log(`üìã –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫:`);
  allRulesToApply.forEach((rule, index) => {
    console.log(`  ${index + 1}. "${rule.title}" (forms: ${rule.forms === 'all' ? 'all' : 'specific'})`);
  });

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º —Å–∫–∏–¥–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  allRulesToApply.forEach(rule => {
    let { id, title, forms, type, discountValue, condition, startDate, expiresAt } = rule;

    console.log(`üìä –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É: "${title}" (forms: ${forms === 'all' ? 'all' : forms.join(', ')}), –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: ${accumulatedDiscounts}`);

    // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 100
    if (type === 'percent' && discountValue > 100) {
      discountValue = 100;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ
    const matchingGroups = submissionGroups.filter(g => {
      // –î–ª—è 'all' –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (kind === 'expense')
      if (forms === 'all') return g.kind === 'expense';
      return forms.includes(g.templateSelector);
    });

    if (matchingGroups.length === 0) return;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let totalItems = 0;
    matchingGroups.forEach(group => {
      group.entries.forEach(entry => {
        const dataObj = entry.data || {};
        const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
        totalItems += recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    let conditionMet = false;
    if (condition.type === 'none') {
      conditionMet = true;
    } else if (condition.type === 'min_items') {
      conditionMet = totalItems >= condition.value;
    }

    // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º totalItems > 0, —Ç.–∫. —Å—á–∏—Ç–∞–µ–º –ø–æ —Å—É–º–º–∞–º
    if (!conditionMet) return;
    if (totalItems === 0 && type !== 'percent') return;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–∏–¥–∫–∏)
    let operationTotal = 0;
    matchingGroups.forEach(group => {
      const groupCost = calculateGroupCost(group);
      operationTotal += Math.abs(groupCost);
    });

    // –í—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const couponGroup = submissionGroups.find(g => g.isPersonalCoupon);
    if (couponGroup) {
      couponGroup.entries.forEach(entry => {
        const couponForm = entry.data?.form;
        if (matchingGroups.some(g => g.templateSelector === toSelector(couponForm))) {
          const discountAmount = Number(entry.data?.discount_amount) || 0;
          operationTotal -= discountAmount;
        }
      });
    }

    // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
    if (adjustmentGroup) {
      adjustmentGroup.entries.forEach(entry => {
        const adjustmentForm = entry.data?.form;
        if (matchingGroups.some(g => g.templateSelector === adjustmentForm)) {
          const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
          operationTotal -= adjustmentAmount;
        }
      });
    }

    // –í—ã—á–∏—Ç–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–∫–∏–¥–∫–∏ (–¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
    operationTotal -= accumulatedDiscounts;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let discount = 0;
    let calculation = '';

    if (type === 'per_item') {
      // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
      discount = discountValue * totalItems;
      calculation = `${discountValue} √ó ${totalItems}`;
    } else if (type === 'per_batch') {
      // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const { batchSize = 1 } = rule;
      const batches = Math.floor(totalItems / batchSize);
      discount = discountValue * batches;
      calculation = `${discountValue} √ó ${batches}`;
    } else if (type === 'fixed') {
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
      discount = discountValue;
      calculation = String(discountValue);
    } else if (type === 'percent') {
      // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
      discount = operationTotal * (discountValue / 100);
      // –í—Å–µ–≥–¥–∞ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
      discount = Math.ceil(discount);
      calculation = `${formatNumber(operationTotal)} √ó ${discountValue}%`;
    }

    // –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º
    if (discount > operationTotal) {
      discount = operationTotal;
    }

    if (discount > 0) {
      totalDiscount += discount;
      accumulatedDiscounts += discount; // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∫–∏–¥–æ–∫

      entries.push({
        id: incrementEntrySeq(),
        template_id: `auto-discount-${id}`,
        data: {
          discount_id: id,
          discount_title: title,
          discount_type: type,
          total_items: totalItems,
          discount_amount: discount,
          calculation,
          startDate: startDate,           // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏
          expiresAt: expiresAt || null    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∏–ª–∏ null –µ—Å–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω–æ)
        },
        multiplier: 1
      });
    }
  });

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –æ–±—â–µ–π —Å–∫–∏–¥–∫–∏)
  let grandTotal = 0;
  submissionGroups.forEach(g => {
    if (g.isDiscount || g.isPriceAdjustment) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    const cost = calculateGroupCost(g);
    grandTotal += Math.abs(cost);
  });

  // –í—ã—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
  if (adjustmentGroup) {
    adjustmentGroup.entries.forEach(entry => {
      const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
      grandTotal -= adjustmentAmount;
    });
  }

  // –û–±—â–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π
  if (totalDiscount > grandTotal) {
    // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≤—Å–µ —Å–∫–∏–¥–∫–∏
    const ratio = grandTotal / totalDiscount;
    entries.forEach(entry => {
      const oldAmount = entry.data.discount_amount;
      entry.data.discount_amount = Math.ceil(oldAmount * ratio);
    });
    totalDiscount = grandTotal;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å–∫–∏–¥–æ–∫
  if (entries.length > 0) {
    if (discountGroupIndex === -1) {
      const newGroup = {
        id: incrementGroupSeq(),
        key: discountKey,
        templateSelector: FORM_GIFT_DISCOUNT,
        title: TEXT_MESSAGES.AUTO_DISCOUNTS_TITLE,
        amount: totalDiscount,
        amountLabel: TEXT_MESSAGES.DISCOUNT_LABEL,
        kind: 'income',
        entries,
        isDiscount: true
      };
      submissionGroups.push(newGroup);
    } else {
      const group = submissionGroups[discountGroupIndex];
      group.amount = totalDiscount;
      group.entries = entries;
    }
  } else if (discountGroupIndex !== -1) {
    submissionGroups.splice(discountGroupIndex, 1);
  }
}

// ============================================================================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –¶–ï–ù
// ============================================================================

export function updateAutoPriceAdjustments() {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  const FORM_PRICE_ADJUSTMENT = '#price-adjustment';
  const ADJUSTMENT_TITLE = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω';
  const ADJUSTMENT_LABEL = '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞';

  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  const adjustmentKey = buildGroupKey({
    templateSelector: FORM_PRICE_ADJUSTMENT,
    title: ADJUSTMENT_TITLE,
    amount: '',
    amountLabel: ADJUSTMENT_LABEL,
    kind: 'expense'
  });

  const adjustmentGroupIndex = submissionGroups.findIndex(g => g.key === adjustmentKey);
  const entries = [];
  let totalAdjustment = 0;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  autoPriceAdjustments.forEach(rule => {
    const { id, title, form, batchSize, newPrice } = rule;

    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï –≥—Ä—É–ø–ø—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–µ
    const targetGroups = submissionGroups.filter(g => g.templateSelector === form);
    if (targetGroups.length === 0) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
    const oldPrice = Number(targetGroups[0].price) || 0;
    if (oldPrice === 0) return;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å —É—á—ë—Ç–æ–º item –∫—É–ø–æ–Ω–æ–≤)
    const formId = form.replace('#', '');
    let totalItems = countEffectiveItemsForForm(formId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: itemCount >= batchSize
    if (totalItems < batchSize) return;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
    const batches = Math.floor(totalItems / batchSize);
    const batchItems = batches * batchSize;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
    const oldCost = oldPrice * batchItems;
    const newCost = newPrice * batches;
    const adjustment = oldCost - newCost;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
    if (adjustment <= 0) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –í–°–ï–• –æ–ø–µ—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
    let operationTotal = 0;
    targetGroups.forEach(group => {
      operationTotal += Math.abs(calculateGroupCost(group));
    });

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    const finalAdjustment = Math.min(adjustment, operationTotal);

    if (finalAdjustment <= 0) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—á—ë—Ç
    const adjustmentTitle = title.replace('{title}', targetGroups[0].title || '–û–ø–µ—Ä–∞—Ü–∏—è');
    const calculation = `${formatNumber(oldPrice)} √ó ${batches} √ó ${batchSize} ‚àí ${formatNumber(newPrice)} √ó ${batches}`;

    totalAdjustment += finalAdjustment;
    entries.push({
      id: incrementEntrySeq(),
      template_id: `auto-adjustment-${id}`,
      data: {
        adjustment_id: id,
        adjustment_title: adjustmentTitle,
        form: form,
        batch_size: batchSize,
        old_price: oldPrice,
        new_price: newPrice,
        total_items: totalItems,
        batches: batches,
        adjustment_amount: finalAdjustment,
        calculation
      },
      multiplier: 1
    });
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  if (entries.length > 0) {
    if (adjustmentGroupIndex === -1) {
      const newGroup = {
        id: incrementGroupSeq(),
        key: adjustmentKey,
        templateSelector: FORM_PRICE_ADJUSTMENT,
        title: ADJUSTMENT_TITLE,
        amount: totalAdjustment,
        amountLabel: ADJUSTMENT_LABEL,
        kind: 'expense',
        entries,
        isPriceAdjustment: true
      };
      submissionGroups.push(newGroup);
    } else {
      const group = submissionGroups[adjustmentGroupIndex];
      group.amount = totalAdjustment;
      group.entries = entries;
    }
  } else if (adjustmentGroupIndex !== -1) {
    submissionGroups.splice(adjustmentGroupIndex, 1);
  }
}

// ============================================================================
// –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ö–£–ü–û–ù–´
// ============================================================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã –∏–∑ window.PERSONAL_DISCOUNTS
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ expiresAt (–∫—É–ø–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –∏–ª–∏ –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è)
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
 */
export function getActivePersonalCoupons() {
  if (typeof window.PERSONAL_DISCOUNTS === 'undefined' || !Array.isArray(window.PERSONAL_DISCOUNTS)) {
    return [];
  }

  return window.PERSONAL_DISCOUNTS.filter(coupon => {
    // –ï—Å–ª–∏ –Ω–µ—Ç expiresAt, –∫—É–ø–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    if (!coupon.expiresAt) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—É–ø–æ–Ω (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ isDiscountExpired)
    const now = new Date();
    const expiryDateString = `${coupon.expiresAt}T23:59:59`;
    const expiryDate = new Date(expiryDateString);

    // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è = UTC+3
    const moscowOffset = 3 * 60;
    const localOffset = now.getTimezoneOffset();
    const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60 * 1000);

    return moscowTime < expiryDate; // –ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫
  });
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤/–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º—ã
 * @param {string} formId - ID —Ñ–æ—Ä–º—ã (–±–µ–∑ #)
 * @returns {number} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
 */
export function countItemsForForm(formId) {
  const formSelector = toSelector(formId);
  let totalItems = 0;

  submissionGroups.forEach(group => {
    if (group.templateSelector === formSelector && !group.isDiscount && !group.isPriceAdjustment && !group.isPersonalCoupon) {
      group.entries.forEach(entry => {
        const dataObj = entry.data || {};

        // –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
        const recipientCount = recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;

        // –ü–æ–¥—Å—á—ë—Ç —á–µ—Ä–µ–∑ quantity
        const quantityKeys = Object.keys(dataObj).filter(k => /^quantity_\d+$/.test(k));
        let totalQuantity = 0;
        quantityKeys.forEach(key => {
          const idx = key.match(/^quantity_(\d+)$/)[1];
          const recipientKey = `recipient_${idx}`;
          if (String(dataObj[recipientKey] || '').trim()) {
            totalQuantity += Number(dataObj[key]) || 0;
          }
        });

        if (totalQuantity === 0 && dataObj.quantity) {
          totalQuantity = Number(dataObj.quantity) || 0;
        }

        const items = totalQuantity > 0 ? totalQuantity : recipientCount;
        const multiplier = Number(entry.multiplier) || 1;
        totalItems += items * multiplier;
      });
    }
  });

  return totalItems;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ñ–æ—Ä–º—ã (–¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤)
 * @param {string} formId - ID —Ñ–æ—Ä–º—ã (–±–µ–∑ #)
 * @returns {number} - —Å—Ç–æ–∏–º–æ—Å—Ç—å
 */
export function getCostForForm(formId) {
  const formSelector = toSelector(formId);
  let totalCost = 0;

  submissionGroups.forEach(group => {
    if (group.templateSelector === formSelector && !group.isDiscount && !group.isPriceAdjustment && !group.isPersonalCoupon) {
      totalCost += calculateGroupCost(group);
    }
  });

  return totalCost;
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã —Å —É—á—ë—Ç–æ–º item –∫—É–ø–æ–Ω–æ–≤
 * @param {string} formId - ID —Ñ–æ—Ä–º—ã (–±–µ–∑ #)
 * @returns {number} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫—É–ø–æ–Ω–æ–≤ —Ç–∏–ø–∞ item
 */
export function countEffectiveItemsForForm(formId) {
  let totalItems = countItemsForForm(formId);

  // –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ item –∫—É–ø–æ–Ω–∞–º–∏
  const activeCoupons = getActivePersonalCoupons();
  const selectedCoupons = activeCoupons.filter(c => selectedPersonalCoupons.includes(c.id));
  const itemCoupons = selectedCoupons.filter(c => c.type === 'item' && c.form === formId);

  itemCoupons.forEach(coupon => {
    totalItems -= coupon.value;
  });

  return Math.max(0, totalItems);
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º
 * –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 3 —Ñ–∞–∑—ã:
 * - –§–∞–∑–∞ 1 (item): –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –î–û –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
 * - –§–∞–∑–∞ 2 (fixed): –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫, –î–û percent
 * - –§–∞–∑–∞ 3 (percent): –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏ fixed
 *
 * @param {string} phase - 'item', 'fixed' –∏–ª–∏ 'percent'
 */
export function updatePersonalCoupons(phase = 'item') {
  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –∫—É–ø–æ–Ω–æ–≤
  const existingCouponIndex = submissionGroups.findIndex(g => g.isPersonalCoupon);

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤, —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏ –≤—ã—Ö–æ–¥–∏–º
  if (selectedPersonalCoupons.length === 0) {
    if (existingCouponIndex !== -1) {
      submissionGroups.splice(existingCouponIndex, 1);
      console.log('üé´ –ì—Ä—É–ø–ø–∞ –∫—É–ø–æ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤)');
    }
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã
  const activeCoupons = getActivePersonalCoupons();

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
  const selectedCoupons = activeCoupons.filter(c => selectedPersonalCoupons.includes(c.id));

  if (selectedCoupons.length === 0) {
    if (existingCouponIndex !== -1) {
      submissionGroups.splice(existingCouponIndex, 1);
      console.log('üé´ –ì—Ä—É–ø–ø–∞ –∫—É–ø–æ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–∞ (–Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤)');
    }
    return;
  }
  let entries = [];
  let totalDiscount = 0;

  // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –µ—ë entries
  if (existingCouponIndex !== -1) {
    const existingGroup = submissionGroups[existingCouponIndex];
    entries = [...existingGroup.entries];
    totalDiscount = existingGroup.price || 0;
  }

  if (phase === 'item') {
    // –§–ê–ó–ê 1: item –∫—É–ø–æ–Ω—ã (–î–û –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫)

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ entries –¥–ª—è item (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞), —Å–æ—Ö—Ä–∞–Ω—è–µ–º fixed –∏ percent
    entries = entries.filter(e => e.data.coupon_type !== 'item');
    totalDiscount = entries.reduce((sum, e) => sum + e.data.discount_amount, 0);

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–æ—Ä–º–∞–º
    const remainingItems = {};

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ø–æ–Ω—ã —Ç–∏–ø–∞ "item"
    const itemCoupons = selectedCoupons.filter(c => c.type === 'item');
    itemCoupons.forEach(coupon => {
      const formId = coupon.form;
      const itemCount = countItemsForForm(formId);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º remainingItems –¥–ª—è —Ñ–æ—Ä–º—ã
      if (!remainingItems[formId]) {
        remainingItems[formId] = itemCount;
      }

      if (remainingItems[formId] >= coupon.value) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –∫—É–ø–æ–Ω–∞ (price –∑–∞ –∫–∞–∂–¥—ã–µ value —Ç–æ–≤–∞—Ä–æ–≤)
        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è price
        const formSelector = toSelector(formId);
        const formGroup = submissionGroups.find(g => g.templateSelector === formSelector && !g.isDiscount && !g.isPriceAdjustment && !g.isPersonalCoupon);

        if (formGroup) {
          const price = Number(formGroup.price) || 0;
          const discount = price * coupon.value;

          remainingItems[formId] -= coupon.value;
          totalDiscount += discount;

          entries.push({
            id: `entry-${incrementEntrySeq()}`,
            template_id: `personal-coupon-${coupon.id}`,
            data: {
              coupon_id: coupon.id,
              coupon_title: coupon.title,
              coupon_type: coupon.type,
              form: formId,
              discount_amount: discount,
              calculation: `${price} √ó ${coupon.value}`
            },
            multiplier: 1
          });
        }
      }
    });

  } else if (phase === 'fixed') {
    // –§–ê–ó–ê 2: fixed –∫—É–ø–æ–Ω—ã (–ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫, –î–û percent)

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ entries –¥–ª—è fixed (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞), —Å–æ—Ö—Ä–∞–Ω—è–µ–º item –∏ percent
    entries = entries.filter(e => e.data.coupon_type !== 'fixed');
    totalDiscount = entries.reduce((sum, e) => sum + e.data.discount_amount, 0);

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Ñ–æ—Ä–º–∞–º (–ø–æ—Å–ª–µ item –∫—É–ø–æ–Ω–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫)
    const remainingCost = {};

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ø–æ–Ω—ã —Ç–∏–ø–∞ "fixed" (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞)
    const fixedCoupons = selectedCoupons.filter(c => c.type === 'fixed');
    fixedCoupons.forEach(coupon => {
      const formId = coupon.form;
      const formSelector = toSelector(formId);
      let formCost = getCostForForm(formId);

      console.log(`üé´ FIXED –∫—É–ø–æ–Ω "${coupon.title}" (value: ${coupon.value})`);
      console.log(`   ‚Üí –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º—ã: ${formCost}`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º remainingCost –¥–ª—è —Ñ–æ—Ä–º—ã
      if (!remainingCost[formId]) {
        // –í—ã—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ item –∫—É–ø–æ–Ω—ã
        const itemDiscountForForm = entries
          .filter(e => e.data.form === formId && e.data.coupon_type === 'item')
          .reduce((sum, e) => sum + e.data.discount_amount, 0);

        console.log(`   ‚Üí Item —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã: ${itemDiscountForForm}`);
        formCost -= itemDiscountForForm;

        // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ñ–æ—Ä–º—ã
        const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
        if (adjustmentGroup) {
          adjustmentGroup.entries.forEach(entry => {
            const adjustmentForm = entry.data?.form;
            if (adjustmentForm === formSelector) {
              const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
              console.log(`   ‚Üí –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã: ${adjustmentAmount}`);
              formCost -= adjustmentAmount;
            }
          });
        }

        console.log(`   ‚Üí –û—Å—Ç–∞–≤—à–∞—è—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–æ–≤: ${formCost}`);
        remainingCost[formId] = formCost;
      } else {
        console.log(`   ‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${remainingCost[formId]}`);
      }

      if (remainingCost[formId] > 0) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const discount = Math.min(coupon.value, remainingCost[formId]);

        console.log(`   ‚Üí –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É: ${discount} (min –∏–∑ ${coupon.value} –∏ ${remainingCost[formId]})`);

        remainingCost[formId] -= discount;
        totalDiscount += discount;

        entries.push({
          id: `entry-${incrementEntrySeq()}`,
          template_id: `personal-coupon-${coupon.id}`,
          data: {
            coupon_id: coupon.id,
            coupon_title: coupon.title,
            coupon_type: coupon.type,
            form: formId,
            discount_amount: discount,
            calculation: String(discount)
          },
          multiplier: 1
        });
      }
    });

  } else if (phase === 'percent') {
    // –§–ê–ó–ê 2: percent –∫—É–ø–æ–Ω—ã (–ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫)

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ entries –¥–ª—è percent (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
    entries = entries.filter(e => e.data.coupon_type !== 'percent');
    totalDiscount = entries.reduce((sum, e) => sum + e.data.discount_amount, 0);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ø–æ–Ω—ã —Ç–∏–ø–∞ "percent" (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞)
    const percentCoupons = selectedCoupons.filter(c => c.type === 'percent');
    percentCoupons.forEach(coupon => {
      const formId = coupon.form;
      const formSelector = toSelector(formId);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
      let formCost = getCostForForm(formId);

      // –í—ã—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ item –∏ fixed –∫—É–ø–æ–Ω—ã
      const itemAndFixedDiscounts = entries
        .filter(e => e.data.form === formId && (e.data.coupon_type === 'item' || e.data.coupon_type === 'fixed'))
        .reduce((sum, e) => sum + e.data.discount_amount, 0);

      formCost -= itemAndFixedDiscounts;

      // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ñ–æ—Ä–º—ã
      const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
      if (adjustmentGroup) {
        adjustmentGroup.entries.forEach(entry => {
          const adjustmentForm = entry.data?.form;
          if (adjustmentForm === formSelector) {
            const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
            formCost -= adjustmentAmount;
          }
        });
      }

      if (formCost > 0) {
        let percentValue = coupon.value;
        if (percentValue > 100) percentValue = 100;

        const discount = Math.ceil(formCost * (percentValue / 100));

        totalDiscount += discount;

        entries.push({
          id: `entry-${incrementEntrySeq()}`,
          template_id: `personal-coupon-${coupon.id}`,
          data: {
            coupon_id: coupon.id,
            coupon_title: coupon.title,
            coupon_type: coupon.type,
            form: formId,
            discount_amount: discount,
            calculation: `${formatNumber(formCost)} √ó ${percentValue}%`
          },
          multiplier: 1
        });
      }
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å –∫—É–ø–æ–Ω–∞–º–∏
  if (entries.length > 0) {
    if (existingCouponIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
      const group = submissionGroups[existingCouponIndex];
      group.price = totalDiscount;
      group.amount = totalDiscount;
      group.amountLabel = '–°–∫–∏–¥–∫–∞';
      group.entries = entries;
      console.log(`üé´ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—É–ø–æ–Ω–æ–≤ (${phase}):`, entries.length, 'entries, totalDiscount:', totalDiscount);
      console.log('   Entries:', entries.map(e => `${e.data.coupon_title} (${e.data.coupon_type}): ${e.data.discount_amount}`));
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
      const couponGroup = {
        id: `group-${incrementGroupSeq()}`,
        key: FORM_PERSONAL_COUPON,
        templateSelector: FORM_PERSONAL_COUPON,
        title: TEXT_MESSAGES.PERSONAL_COUPONS_TITLE,
        price: totalDiscount,
        amount: totalDiscount,
        bonus: 0,
        amountLabel: '–°–∫–∏–¥–∫–∞',
        kind: 'income',
        entries,
        isPersonalCoupon: true
      };

      submissionGroups.push(couponGroup);
      console.log(`üé´ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—É–ø–æ–Ω–æ–≤ (${phase}):`, entries.length, 'entries, totalDiscount:', totalDiscount);
      console.log('   Entries:', entries.map(e => `${e.data.coupon_title} (${e.data.coupon_type}): ${e.data.discount_amount}`));
    }
  } else if (existingCouponIndex !== -1) {
    // –ï—Å–ª–∏ –∫—É–ø–æ–Ω–æ–≤ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
    submissionGroups.splice(existingCouponIndex, 1);
    console.log('üé´ –ì—Ä—É–ø–ø–∞ –∫—É–ø–æ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–∞ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤)');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–ø–æ–Ω—ã –∏–∑ selectedPersonalCoupons
 * –ö—É–ø–æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –µ–≥–æ —Ñ–æ—Ä–º—ã
 * –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤/—Å—É–º–º—ã)
 */
export function cleanupInvalidCoupons() {
  if (selectedPersonalCoupons.length === 0) return;

  const activeCoupons = getActivePersonalCoupons();
  const invalidCouponIds = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É–ø–æ–Ω—ã –ø–æ —Ñ–æ—Ä–º–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  const couponsByForm = {};
  selectedPersonalCoupons.forEach(couponId => {
    const coupon = activeCoupons.find(c => c.id === couponId);
    if (!coupon) {
      invalidCouponIds.push(couponId);
      return;
    }

    if (!couponsByForm[coupon.form]) {
      couponsByForm[coupon.form] = {
        item: [],
        fixed: [],
        percent: []
      };
    }
    couponsByForm[coupon.form][coupon.type].push(coupon);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  Object.keys(couponsByForm).forEach(formId => {
    const coupons = couponsByForm[formId];
    let remainingCost = getCostForForm(formId);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º item –∫—É–ø–æ–Ω—ã
    coupons.item.forEach(coupon => {
      const itemsInCart = countItemsForForm(formId);
      if (itemsInCart < coupon.value) {
        invalidCouponIds.push(coupon.id);
      } else {
        // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å item –∫—É–ø–æ–Ω–∞ –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞
        const formSelector = '#' + formId;
        const formGroup = submissionGroups.find(g => g.templateSelector === formSelector && !g.isDiscount && !g.isPriceAdjustment && !g.isPersonalCoupon);
        if (formGroup) {
          const price = Number(formGroup.price) || 0;
          remainingCost -= price * coupon.value;
        }
      }
    });

    // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    const formSelector = '#' + formId;
    const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
    if (adjustmentGroup) {
      adjustmentGroup.entries.forEach(entry => {
        const adjustmentForm = entry.data?.form;
        if (adjustmentForm === formSelector) {
          const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
          remainingCost -= adjustmentAmount;
        }
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º fixed –∫—É–ø–æ–Ω—ã (–∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —É–º–µ–Ω—å—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫)
    coupons.fixed.forEach(coupon => {
      if (remainingCost <= 0) {
        invalidCouponIds.push(coupon.id);
      } else {
        // –í—ã—á–∏—Ç–∞–µ–º —Å–∫–∏–¥–∫—É —ç—Ç–æ–≥–æ –∫—É–ø–æ–Ω–∞ –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞
        const discount = Math.min(coupon.value, remainingCost);
        remainingCost -= discount;
      }
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º percent –∫—É–ø–æ–Ω—ã
    coupons.percent.forEach(coupon => {
      if (remainingCost <= 0) {
        invalidCouponIds.push(coupon.id);
      } else {
        let percentValue = coupon.value;
        if (percentValue > 100) percentValue = 100;
        const discount = Math.ceil(remainingCost * (percentValue / 100));
        remainingCost -= discount;
      }
    });
  });

  // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–ø–æ–Ω—ã
  if (invalidCouponIds.length > 0) {
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueInvalidIds = [...new Set(invalidCouponIds)];
    uniqueInvalidIds.forEach(couponId => {
      const index = selectedPersonalCoupons.indexOf(couponId);
      if (index > -1) {
        selectedPersonalCoupons.splice(index, 1);

        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const coupon = activeCoupons.find(c => c.id === couponId);
        const couponTitle = coupon ? coupon.title : `ID: ${couponId}`;

        console.log(`üé´‚ùå –ö—É–ø–æ–Ω ${couponId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è)`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showNotification(
          `–ö—É–ø–æ–Ω "${couponTitle}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç, —Ç.–∫. —É—Å–ª–æ–≤–∏—è –¥–ª—è –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è`,
          4000 // 4 —Å–µ–∫—É–Ω–¥—ã
        );
      }
    });
  }
}
