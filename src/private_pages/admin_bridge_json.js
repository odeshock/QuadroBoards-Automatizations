// admin_bridge_json.js ‚Äî API bridge –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å JSON
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –ë–ï–ó HTML-–ø—Ä–æ—Å–ª–æ–π–∫–∏

(function () {
  'use strict';

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É /pages/usrN –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ .modal_script
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: data-main-user_id > N –∏–∑ URL
   */
  async function getUserIdFromPage(profileId) {
    try {
      const pageUrl = `/pages/usr${profileId}`;
      const response = await fetch(pageUrl);
      if (!response.ok) {
        console.error(`[admin_bridge_json] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${pageUrl}`);
        return Number(profileId); // fallback –Ω–∞ profileId
      }

      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');

      const modalScript = doc.querySelector('.modal_script');
      if (!modalScript) {
        console.warn(`[admin_bridge_json] .modal_script –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${pageUrl}, –∏—Å–ø–æ–ª—å–∑—É–µ–º profileId=${profileId}`);
        return Number(profileId);
      }

      const mainUserId = modalScript.getAttribute('data-main-user_id');
      if (mainUserId && mainUserId.trim()) {
        return Number(mainUserId.trim());
      }

      // –ï—Å–ª–∏ data-main-user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º profileId
      return Number(profileId);
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', err);
      return Number(profileId);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API (–µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç skin_<userId>)
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–ø–æ–Ω—ã (expired_date < today)
   * @param {number} userId
   * @param {object} libraryIds - { icon: Set, plashka: Set, ... }
   * @returns {Promise<object>} { data: { icon: [], ... }, chrono: {}, comment_id: null }
   */
  async function loadAllDataFromAPI(userId, libraryIds) {
    const data = {
      icon: [],
      plashka: [],
      background: [],
      gift: [],
      coupon: []
    };

    let chrono = {};
    let comment_id = null;

    if (!window.FMVbank || typeof window.FMVbank.storageGet !== 'function') {
      console.error('[admin_bridge_json] FMVbank.storageGet –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { data, chrono, comment_id };
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –ú–°–ö (yyyy-mm-dd)
    const getTodayMoscow = () => {
      const now = new Date();
      const moscowOffset = 3 * 60; // UTC+3
      const localOffset = now.getTimezoneOffset(); // –º–∏–Ω—É—Ç—ã –æ—Ç UTC
      const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60000);

      const year = moscowTime.getFullYear();
      const month = String(moscowTime.getMonth() + 1).padStart(2, '0');
      const day = String(moscowTime.getDate()).padStart(2, '0');

      return `${year}-${month}-${day}`;
    };

    const today = getTodayMoscow();

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç skin_<userId>
      const response = await window.FMVbank.storageGet(userId, 'skin_');

      if (!response || typeof response !== 'object') {
        console.warn('[admin_bridge_json] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API –¥–ª—è userId=' + userId);
        return { data, chrono, comment_id };
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º chrono –∏ comment_id
      chrono = response.chrono || {};
      comment_id = response.comment_id || null;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–Ω–æ–≤
      const categories = ['icon', 'plashka', 'background', 'gift', 'coupon'];

      for (const key of categories) {
        const items = response[key] || [];
        if (!Array.isArray(items)) continue;

        items.forEach(item => {
          // –î–ª—è –∫—É–ø–æ–Ω–æ–≤: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ (expired_date < today)
          if (key === 'coupon' && item.expired_date) {
            if (item.expired_date < today) {
              console.log(`[admin_bridge_json] –ü—Ä–æ–ø—É—â–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –∫—É–ø–æ–Ω: ${item.id}, expired_date=${item.expired_date} < ${today}`);
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫—É–ø–æ–Ω
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–∏–º—ã)
          data[key].push(item);
        });
      }
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    }

    return { data, chrono, comment_id };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ API (–µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç skin_<userId>)
   * –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç GET, –∑–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–Ω–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è chrono –∏ comment_id
   * –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–ø–æ–Ω—ã (expired_date < today)
   *
   * @param {number} userId
   * @param {object} skinData - { icon: [], plashka: [], ... } –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–Ω–µ–ª–∏
   * @returns {Promise<boolean>}
   */
  async function saveAllDataToAPI(userId, skinData) {
    console.log('[admin_bridge_json] üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –î–õ–Ø userId:', userId);
    console.log('[admin_bridge_json] üî• skinData:', JSON.parse(JSON.stringify(skinData)));

    if (!window.FMVbank || typeof window.FMVbank.storageGet !== 'function' || typeof window.FMVbank.storageSet !== 'function') {
      console.error('[admin_bridge_json] FMVbank.storageGet –∏–ª–∏ storageSet –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –ú–°–ö (yyyy-mm-dd)
    const getTodayMoscow = () => {
      const now = new Date();
      const moscowOffset = 3 * 60; // UTC+3
      const localOffset = now.getTimezoneOffset(); // –º–∏–Ω—É—Ç—ã –æ—Ç UTC
      const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60000);

      const year = moscowTime.getFullYear();
      const month = String(moscowTime.getMonth() + 1).padStart(2, '0');
      const day = String(moscowTime.getDate()).padStart(2, '0');

      return `${year}-${month}-${day}`;
    };

    const today = getTodayMoscow();

    try {
      // –®–ê–ì 1: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      console.log('[admin_bridge_json] üì• –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API...');
      const currentData = await window.FMVbank.storageGet(userId, 'skin_');

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      const baseData = currentData && typeof currentData === 'object' ? currentData : {};

      console.log('[admin_bridge_json] üì• –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', JSON.parse(JSON.stringify(baseData)));

      // –ü–†–û–í–ï–†–ö–ê: comment_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω (–±–µ—Ä—ë–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö API)
      const commentId = baseData.comment_id;
      if (!commentId) {
        alert('–£–∫–∞–∂–∏—Ç–µ id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —é–∑–µ—Ä–∞.');
        console.error('[admin_bridge_json] ‚ùå comment_id –Ω–µ —É–∫–∞–∑–∞–Ω');
        return false;
      }
      console.log('[admin_bridge_json] ‚úÖ comment_id:', commentId);

      // –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–Ω–æ–≤
      const categories = ['icon', 'plashka', 'background', 'gift', 'coupon'];

      for (const key of categories) {
        let items = skinData[key] || [];

        // –î–ª—è –∫—É–ø–æ–Ω–æ–≤: —É–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ (expired_date < today)
        if (key === 'coupon') {
          const before = items.length;
          items = items.filter(item => {
            if (item.expired_date && item.expired_date < today) {
              console.log(`[admin_bridge_json] –£–¥–∞–ª—ë–Ω –∏—Å—Ç–µ–∫—à–∏–π –∫—É–ø–æ–Ω: ${item.id}, expired_date=${item.expired_date} < ${today}`);
              return false;
            }
            return true;
          });
          const after = items.length;
          if (before !== after) {
            console.log(`[admin_bridge_json] üóëÔ∏è –ö—É–ø–æ–Ω—ã: —É–¥–∞–ª–µ–Ω–æ ${before - after} –∏—Å—Ç–µ–∫—à–∏—Ö`);
          }
        }

        console.log('[admin_bridge_json] üì¶ ' + key + ': ' + items.length + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
        baseData[key] = items;
      }

      // –®–ê–ì 3: –ù–ï —Ç—Ä–æ–≥–∞–µ–º chrono –∏ comment_id - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å –∏–∑ GET!

      // –®–ê–ì 4: –û–±–Ω–æ–≤–ª—è–µ–º last_timestamp
      baseData.last_timestamp = Math.floor(Date.now() / 1000);

      console.log('[admin_bridge_json] üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.parse(JSON.stringify(baseData)));

      // –®–ê–ì 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
      const result = await window.FMVbank.storageSet(baseData, userId, 'skin_');
      if (!result) {
        console.error('[admin_bridge_json] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        return false;
      }

      console.log('[admin_bridge_json] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ API');

      // –®–ê–ì 6: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ñ–æ—Ä—É–º–µ
      console.log('[admin_bridge_json] üìù –û–±–Ω–æ–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π #' + commentId);
      const commentUpdated = await updateCommentWithSkins(commentId, userId, baseData);
      if (!commentUpdated) {
        console.error('[admin_bridge_json] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        return false;
      }

      console.log('[admin_bridge_json] ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
      return true;
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ñ–æ—Ä—É–º–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ iframe
   * @param {number} commentId - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)
   * @param {object} data - –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö (—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–∫–∏–Ω–æ–≤)
   * @returns {Promise<boolean>}
   */
  async function updateCommentWithSkins(commentId, userId, data) {
    return new Promise((resolve, reject) => {
      try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–≤–µ—Å—å –æ–±—ä–µ–∫—Ç data, –Ω–æ –±–µ–∑ content –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö)
        const dataForComment = { ...data };
        const categories = ['icon', 'plashka', 'background', 'gift', 'coupon'];

        for (const key of categories) {
          const items = data[key] || [];
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ content –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          dataForComment[key] = items.map(item => {
            const cleanItem = { ...item };
            delete cleanItem.content;
            return cleanItem;
          });
        }

        // JSON –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
        const commentJson = JSON.stringify(dataForComment);

        // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å + JSON
        const profileUrl = window.SITE_URL + '/profile.php?id=' + userId;
        const commentData = profileUrl + '\n' + commentJson;

        const editUrl = '/edit.php?id=' + commentId;

        console.log('[admin_bridge_json] üåê –°–æ–∑–¥–∞—ë–º iframe –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', editUrl);

        // –°–æ–∑–¥–∞—ë–º —Å–∫—Ä—ã—Ç—ã–π iframe
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = editUrl;
        document.body.appendChild(iframe);

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
        const timeout = setTimeout(() => {
          iframe.remove();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (10 —Å–µ–∫—É–Ω–¥)'));
        }, 10000);

        // –°—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫
        let onloadCount = 0;

        iframe.onload = function() {
          onloadCount++;
          console.log('[admin_bridge_json] iframe onload #' + onloadCount);

          // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          if (onloadCount === 1) {
            try {
              const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
              const textarea = iframeDoc.querySelector('textarea[name="req_message"]');
              const submitButton = iframeDoc.querySelector('input[type="submit"][name="submit"]');

              if (!textarea || !submitButton) {
                clearTimeout(timeout);
                iframe.remove();
                reject(new Error('–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
                return;
              }

              // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ textarea
              textarea.value = commentData;
              console.log('[admin_bridge_json] üìù –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É, –¥–ª–∏–Ω–∞:', commentData.length);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
              console.log('[admin_bridge_json] üì§ –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏');
              submitButton.click();

            } catch (error) {
              clearTimeout(timeout);
              iframe.remove();
              reject(error);
            }
            return;
          }

          // –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
          if (onloadCount === 2) {
            console.log('[admin_bridge_json] ‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω');
            clearTimeout(timeout);
            iframe.remove();
            resolve(true);
          }
        };

        iframe.onerror = function() {
          clearTimeout(timeout);
          iframe.remove();
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'));
        };

      } catch (err) {
        console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
        reject(err);
      }
    });
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è load
   * @param {string} profileId - id –∏–∑ URL (/profile.php?id=N)
   * @param {object} libraryIds - { icon: Set, plashka: Set, ... }
   * @returns {Promise<object>} { status, visibleData, invisibleData, chrono, comment_id, save, targetUserId }
   */
  async function load(profileId, libraryIds) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É /pages/usrN –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId
    const targetUserId = await getUserIdFromPage(profileId);

    if (!targetUserId) {
      return {
        status: 'error',
        visibleData: {},
        chrono: {},
        comment_id: null,
        save: null,
        targetUserId: null
      };
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–ø–æ–Ω—ã)
    const { data, chrono, comment_id } = await loadAllDataFromAPI(targetUserId, libraryIds);

    /**
     * –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param {object} skinData - { icon: [], plashka: [], ... } –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–Ω–µ–ª–∏
     * @returns {Promise<object>} { ok, status }
     */
    async function save(skinData) {
      const success = await saveAllDataToAPI(targetUserId, skinData);
      return {
        ok: success,
        status: success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
      };
    }

    return {
      status: 'ok',
      visibleData: data,
      chrono: chrono,
      comment_id: comment_id,
      save,
      targetUserId
    };
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window.skinAdmin
  window.skinAdmin = { load };
})();
