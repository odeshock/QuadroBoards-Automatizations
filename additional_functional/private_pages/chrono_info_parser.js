// chrono_info_parser.js
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π namespace
(function () {
  if (!window.FMV) window.FMV = {};

  /** ============================
   *  –£—Ç–∏–ª–∏—Ç—ã
   *  ============================ */
  const esc = s => String(s ?? "")
    .replace(/&/g,"&amp;").replace(/</g,"&lt;")
    .replace(/>/g,"&gt;").replace(/"/g,"&quot;")
    .replace(/'/g,"&#39;");
  const escAttr = s => esc(s).replace(/"/g, "&quot;");
  const unique = arr => Array.from(new Set(arr.filter(Boolean)));
  const fmtRange = (ds, de) => {
    if (!ds && !de) return "";
    if (!de || de === ds) return esc(ds || de || "");
    return `${esc(ds)} ‚Äî ${esc(de)}`;
  };

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Ç–∏–ø–∞/—Å—Ç–∞—Ç—É—Å–∞
  const TYPE_RU = {
    personal: { label: "–ª–∏—á–Ω—ã–π", emoji: "ü™Ñ" },
    plot:     { label: "—Å—é–∂–µ—Ç–Ω—ã–π", emoji: "ü™Ñ" },
    au:       { label: "au",       emoji: "ü™Ñ" },
  };
  const STATUS_RU = {
    active:   { label: "–∞–∫—Ç–∏–≤–µ–Ω",     emoji: "üü¢" },
    archived: { label: "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω", emoji: "üü§" },
    closed:   { label: "–∑–∞–∫—Ä—ã—Ç",      emoji: "üü¶" },
  };

  /** ============================
   *  –û–±—â–∏–π –±–∏–ª–¥–µ—Ä HTML –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π
   *  —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ usr{ID}_chrono
   *  ============================ */
  /**
   * @param {Object} userData  ‚Äî { name, episodes: [...] }
   * @param {Object} [opts]
   * @param {string} [opts.titlePrefix="–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è"] ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @returns {string} HTML
   */
  FMV.buildChronoHtml = function buildChronoHtml(userData, opts = {}) {
    const titlePrefix = opts.titlePrefix || "–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è";
    const userName = esc(userData?.name || "");
    const episodes = Array.isArray(userData?.episodes) ? userData.episodes : [];

    // –ó–∞–≥–æ—Ç–æ–≤–∏–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è —Å–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const masksAll = unique(episodes.flatMap(e => Array.isArray(e?.masks) ? e.masks : []));
    const playersAll = unique(
      episodes.flatMap(e => Array.isArray(e?.participants) ? e.participants.map(p => p?.name).filter(Boolean) : [])
    );
    const locationsAll = unique(episodes.map(e => (e?.location || "").trim()).filter(Boolean));

    // –®–∞–ø–∫–∞
    let html = `
<h1 style="margin:0 0 8px 0;font-size:22px">${esc(titlePrefix)} ‚Äî ${userName}</h1>
<div class="meta" style="color:#9fb2c7;margin:6px 0 14px">
  –ú–∞—Å–æ–∫: ${masksAll.length}; –°–æ–∏–≥—Ä–æ–∫–æ–≤: ${playersAll.length}; –õ–æ–∫–∞—Ü–∏–π: ${locationsAll.length}
</div>
<section class="list" id="list">
`;

    if (!episodes.length) {
      html += `<div class="meta" style="color:#9fb2c7">–ù–µ—Ç —ç–ø–∏–∑–æ–¥–æ–≤</div></section>`;
      return wrapStyles(html);
    }

    // –≠–ª–µ–º–µ–Ω—Ç—ã
    for (const ep of episodes) {
      const t = TYPE_RU[ep?.type] || TYPE_RU.au;
      const s = STATUS_RU[ep?.status] || STATUS_RU.archived;

      const masks = Array.isArray(ep?.masks) ? ep.masks.filter(Boolean) : [];
      const players = (Array.isArray(ep?.participants) ? ep.participants : [])
        .map(p => p?.name).filter(Boolean);

      const maskStr     = masks.join(";");       // –¥–ª—è data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
      const maskHuman   = masks.join(", ");      // –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      const playersStr  = players.join(";");
      const playersHuman= players.join(", ");

      const ds = ep?.dateStart || "";
      const de = ep?.dateEnd || "";
      const dateRange = fmtRange(ds, de);

      html += `
  <div class="episode" 
       data-type="${escAttr(t.label)}" 
       data-status="${escAttr(s.label)}" 
       data-mask="${escAttr(maskStr)}" 
       data-location="${escAttr(ep?.location || "")}" 
       data-players="${escAttr(playersStr)}"
       style="background:#121824;border:1px solid #263246;border-radius:10px;padding:10px 12px;line-height:1.5;margin:8px 0">
    <div>—Ç–∏–ø: ${esc(t.label)} ${t.emoji}; —Å—Ç–∞—Ç—É—Å: ${esc(s.label)} ${s.emoji}</div>
    <div>
      <span class="muted" style="color:#9fb2c7">${dateRange}</span> 
      ${ep?.href ? `<a class="title" href="${escAttr(ep.href)}" target="_blank" rel="noopener noreferrer" style="font-weight:700">${esc(ep?.title || "")}</a>` 
                  : `<span class="title" style="font-weight:700">${esc(ep?.title || "")}</span>`}
      ${maskHuman ? ` as ${esc(maskHuman)}` : ""}
    </div>
    <div>–ª–æ–∫–∞—Ü–∏—è: ${esc(ep?.location || "")}</div>
    <div>—Å–æ–∏–≥—Ä–æ–∫–∏: ${esc(playersHuman)}</div>
  </div>`;
    }

    html += `</section>`;
    return wrapStyles(html);
  };

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ (–ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ)
  function wrapStyles(content) {
    const css = `
<style>
  body{background:#0b0f14;color:#e8eef6;font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:0;padding:20px}
  a{color:#6aa1ff;text-decoration:none}
  a:hover{text-decoration:underline}
</style>`;
    return css + "\n" + content;
  }

  /** ============================
   *  (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ
   *  –±–∏–ª–¥–µ—Ä–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
   *  ============================ */
  FMV.utils = { esc, escAttr, unique, fmtRange };
})();
