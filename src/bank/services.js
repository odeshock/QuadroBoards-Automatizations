// ============================================================================
// services.js ‚Äî –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: –¥–∞–Ω–Ω—ã–µ, —Ä–∞—Å—á—ë—Ç—ã, —É—Ç–∏–ª–∏—Ç—ã
// ============================================================================

import { counterPrefixMap } from './config.js';
import {
  REGEX,
  TEXT_MESSAGES,
  FORM_GIFT_DISCOUNT
} from './constants.js';
import {
  pad2,
  formatNumber,
  parseNumericAmount,
  roundNewToAnchorDOM,
  fullMonthsDiffVirtualDOM,
  fmtYMD
} from './utils.js';
import { autoDiscounts, autoPriceAdjustments } from './data.js';

// –†–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export {
  pad2,
  formatNumber,
  parseNumericAmount,
  roundNewToAnchorDOM,
  fullMonthsDiffVirtualDOM,
  fmtYMD
};

// ============================================================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ‚Äî —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –∑–∞–ø–∏—Å–µ–π
// ============================================================================

export const submissionGroups = [];
export let groupSeq = 0;
export let entrySeq = 0;

export const buildGroupKey = ({ templateSelector = '', title = '', amount = '', amountLabel = '', kind = '', giftId = '' }) => {
  // –î–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á (—á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–∞—Ä–∫–æ–≤)
  if (giftId) {
    return [templateSelector, title, amount, amountLabel, kind, giftId].join('||');
  }
  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ templateSelector
  return templateSelector;
};

export function incrementGroupSeq() {
  groupSeq += 1;
  return groupSeq;
}

export function incrementEntrySeq() {
  entrySeq += 1;
  return entrySeq;
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ backup –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} backupData - –æ–±—ä–µ–∫—Ç —Å fullData –∏–∑ JSON
 */
export function restoreFromBackup(backupData) {
  if (!backupData || !backupData.fullData) {
    throw new Error('Invalid backup data: missing fullData');
  }

  console.log('üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup:', backupData);

  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  submissionGroups.length = 0;

  // –°–æ–±–∏—Ä–∞–µ–º ID –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏ —Å–∫–∏–¥–æ–∫ –∏–∑ backup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const backupAdjustmentIds = new Set();
  const backupDiscountIds = new Set();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ backup (–≤–∫–ª—é—á–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å–∫–∏–¥–∫–∏)
  backupData.fullData.forEach((operation) => {
    // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
    const group = {
      id: `group-${incrementGroupSeq()}`,
      templateSelector: operation.form_id ? `#${operation.form_id}` : '',
      title: operation.title,
      price: operation.price || 0,
      bonus: operation.bonus || 0,
      mode: operation.mode,
      kind: operation.kind,  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º kind (income/expense)
      amountLabel: operation.amountLabel || '–°—É–º–º–∞',
      entries: []
    };

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
    if (operation.giftId) {
      group.giftId = operation.giftId;
    }
    if (operation.giftIcon) {
      group.giftIcon = operation.giftIcon;
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º amount –Ω–∞ –æ—Å–Ω–æ–≤–µ price, bonus –∏ mode (–î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞!)
    if (operation.price !== undefined && operation.price !== null) {
      if (operation.bonus && operation.mode === 'price_per_item_w_bonus') {
        group.amount = `${operation.price} + x${operation.bonus}`;
      } else if (operation.bonus) {
        group.amount = `${operation.price} + x${operation.bonus}`;
      } else {
        group.amount = String(operation.price);
      }
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π key —á–µ—Ä–µ–∑ buildGroupKey (—Å amount!)
    group.key = buildGroupKey({
      templateSelector: group.templateSelector,
      title: group.title,
      amount: group.amount || '',
      amountLabel: group.amountLabel,
      kind: group.kind || '',
      giftId: group.giftId || ''
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å–∫–∏–¥–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    if (operation.type === 'discount') {
      group.isDiscount = true;
      // –°–æ–±–∏—Ä–∞–µ–º ID —Å–∫–∏–¥–æ–∫ –∏–∑ backup
      operation.entries.forEach((entry) => {
        const discountId = entry.key.split('_').pop();
        if (discountId) backupDiscountIds.add(discountId);
      });
    } else if (operation.type === 'adjustment') {
      group.isPriceAdjustment = true;
      // –°–æ–±–∏—Ä–∞–µ–º ID –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–∑ backup
      operation.entries.forEach((entry) => {
        const adjustmentId = entry.key.split('_').pop();
        if (adjustmentId) backupAdjustmentIds.add(adjustmentId);
      });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
    operation.entries.forEach((entry) => {
      const restoredEntry = {
        id: `entry-${incrementEntrySeq()}`,
        template_id: entry.template_id,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º template_id –∏–∑ backup
        key: entry.key || group.key,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º entry.key –∏–ª–∏ group.key –∫–∞–∫ fallback
        data: entry.data || {},
        multiplier: entry.multiplier || 1
      };

      group.entries.push(restoredEntry);
    });

    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', {
      id: group.id,
      key: group.key,
      title: group.title,
      entries: group.entries.length,
      firstEntry: group.entries[0]
    });

    submissionGroups.push(group);
  });

  const restoredCount = submissionGroups.length;
  console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredCount} –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ backup`);
  console.log('üìã submissionGroups:', submissionGroups);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–≤–µ—á–Ω—ã–µ) –∏ —Å–∫–∏–¥–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞)
  let newAdjustmentsCount = 0;
  let historicalDiscountsCount = 0;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ backup)
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–∑ backup
  const adjustmentsFromBackup = submissionGroups.filter(g => g.isPriceAdjustment);

  // –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫, —á—Ç–æ–±—ã updateAutoPriceAdjustments —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—É—é
  const backupAdjustmentGroup = adjustmentsFromBackup.length > 0 ? adjustmentsFromBackup[0] : null;
  if (backupAdjustmentGroup) {
    const index = submissionGroups.indexOf(backupAdjustmentGroup);
    submissionGroups.splice(index, 1);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  updateAutoPriceAdjustments();

  const currentAdjustments = submissionGroups.filter(g => g.isPriceAdjustment);

  // –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ –≤ backup, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–º–∏
  // –ï—Å–ª–∏ –±—ã–ª–∏, —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
  newAdjustmentsCount = backupAdjustmentGroup ? (currentAdjustments.length > 0 ? 1 : 0) : currentAdjustments.length;

  // –ü–æ–ª—É—á–∞–µ–º timestamp –∏–∑ backup'–∞
  const backupTimestamp = backupData.timestamp;

  if (backupTimestamp) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–∫–∏–¥–∫–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞
    const historicallyActiveDiscounts = autoDiscounts.filter(discount => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ backup'–µ
      if (backupDiscountIds.has(discount.id)) return false;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞
      return wasDiscountActiveAt(discount, backupTimestamp);
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏
    if (historicallyActiveDiscounts.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${historicallyActiveDiscounts.length} —Å–∫–∏–¥–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç backup'–∞`);

      historicallyActiveDiscounts.forEach(discount => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–∫–∏–¥–∫—É –≤—Ä—É—á–Ω—É—é
        const entries = [];
        const totalItems = submissionGroups
          .filter(g => !g.isDiscount && !g.isPriceAdjustment)
          .reduce((sum, g) => sum + g.entries.length, 0);

        if (totalItems === 0) return;

        const calculation = calculateDiscountForRule(discount, submissionGroups);

        if (calculation && calculation.discount > 0) {
          entries.push({
            id: incrementEntrySeq(),
            template_id: `auto-discount-${discount.id}`,
            data: {
              discount_id: discount.id,
              discount_title: discount.title,
              discount_type: discount.type,
              total_items: totalItems,
              discount_amount: calculation.discount,
              calculation,
              startDate: discount.startDate,
              expiresAt: discount.expiresAt || null
            },
            multiplier: 1
          });

          const discountGroup = {
            id: incrementGroupSeq(),
            key: `auto-discount-${discount.id}`,
            templateSelector: '',
            title: discount.title,
            price: -calculation.discount,
            bonus: 0,
            amountLabel: '–°–∫–∏–¥–∫–∞',
            entries: entries,
            isDiscount: true
          };

          submissionGroups.push(discountGroup);
          historicalDiscountsCount++;
        }
      });
    }
  }

  if (newAdjustmentsCount > 0 || historicalDiscountsCount > 0) {
    console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: –Ω–æ–≤—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ - ${newAdjustmentsCount}, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫ - ${historicalDiscountsCount}`);
  }
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–µ
// ============================================================================

export function formatEntryKey(key) {
  if (key === 'quantity') return TEXT_MESSAGES.QUANTITY_LABEL;
  if (key === 'reason') return TEXT_MESSAGES.COMMENT_LABEL;

  const recipientMatch = key.match(REGEX.RECIPIENT);
  if (recipientMatch) return recipientMatch[1] === '1' ? TEXT_MESSAGES.RECIPIENT_LABEL : `${TEXT_MESSAGES.RECIPIENT_LABEL} ${recipientMatch[1]}`;

  const fromMatch = key.match(REGEX.FROM);
  if (fromMatch) return fromMatch[1] === '1' ? TEXT_MESSAGES.FROM_LABEL : `${TEXT_MESSAGES.FROM_LABEL} ${fromMatch[1]}`;

  const wishMatch = key.match(REGEX.WISH);
  if (wishMatch) return wishMatch[1] === '1' ? TEXT_MESSAGES.COMMENT_LABEL : `${TEXT_MESSAGES.COMMENT_LABEL} ${wishMatch[1]}`;

  const counterMatch = key.match(REGEX.COUNTER);
  if (counterMatch) {
    const [, prefix, suffix] = counterMatch;
    const cfg = counterPrefixMap[prefix];
    if (cfg) {
      if (suffix === 'old') return '–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      if (suffix === 'new') return '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      if (suffix === 'rounded')
        return cfg.prefix === 'month'
          ? '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—É—Å–ª–æ–≤–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)'
          : '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–æ)';
      if (suffix === 'diff') return cfg.logDiffLabel || '–ù–æ–≤—ã–π —É—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º';
    }
  }
  return key;
}

// ============================================================================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–ö–ò–î–ö–ò
// ============================================================================

// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –∑–∞–ø–∏—Å–µ–π
function calculateGroupCost(group) {
  let total = 0;

  const mode = group.mode || 'price_per_item';
  const price = Number(group.price) || 0;
  const bonus = Number(group.bonus) || 0;

  group.entries.forEach(entry => {
    const dataObj = entry.data || {};
    const multiplier = Number(entry.multiplier) || 1;

    // –ü–æ–¥—Å—á—ë—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
    const recipientCount = recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;

    // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ quantity_N (–¥–ª—è —Ñ–æ—Ä–º —Ç–∏–ø–∞ —Å–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∂–∏–ª–µ—Ç)
    const quantityKeys = Object.keys(dataObj).filter(k => /^quantity_\d+$/.test(k));
    let totalQuantity = 0;
    quantityKeys.forEach(key => {
      const idx = key.match(/^quantity_(\d+)$/)[1];
      const recipientKey = `recipient_${idx}`;
      // –£—á–∏—Ç—ã–≤–∞–µ–º quantity —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å
      if (String(dataObj[recipientKey] || '').trim()) {
        totalQuantity += Number(dataObj[key]) || 0;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª–µ quantity (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞)
    if (totalQuantity === 0 && dataObj.quantity) {
      totalQuantity = Number(dataObj.quantity) || 0;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å quantity - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const items = totalQuantity > 0 ? totalQuantity : recipientCount;

    // –ü–æ–¥—Å—á—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ç—ã—Å—è—á–∏)
    const thousandKeys = Object.keys(dataObj).filter(k => /^thousand_\d+$/.test(k));
    const additional_items = thousandKeys.reduce((sum, key) => {
      return sum + (Number(dataObj[key]) || 0);
    }, 0);

    // –í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞
    let entered_amount = 0;
    if (dataObj.amount) {
      entered_amount = parseNumericAmount(String(dataObj.amount));
    }

    // –î–ª—è —Ñ–æ—Ä–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ - —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ amount_N –∑–Ω–∞—á–µ–Ω–∏—è
    const amountKeys = Object.keys(dataObj).filter(k => /^amount_\d+$/.test(k));
    if (amountKeys.length > 0) {
      entered_amount = amountKeys.reduce((sum, key) => {
        const idx = key.match(/^amount_(\d+)$/)[1];
        const recipientKey = `recipient_${idx}`;
        // –£—á–∏—Ç—ã–≤–∞–µ–º amount —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if (String(dataObj[recipientKey] || '').trim()) {
          return sum + (parseNumericAmount(String(dataObj[key] || '0')));
        }
        return sum;
      }, 0);
    }

    // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let entryCost = 0;
    switch (mode) {
      case 'price_per_item':
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º 1 –µ–¥–∏–Ω–∏—Ü—É (–¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        entryCost = price * (items > 0 ? items : 1);
        break;
      case 'price_per_item_w_bonus':
        entryCost = price * (items > 0 ? items : 1) + bonus * additional_items;
        break;
      case 'entered_amount':
        entryCost = entered_amount;
        break;
      case 'price_w_entered_amount':
        entryCost = entered_amount + price * (items > 0 ? items : 1);
        break;
      default:
        entryCost = 0;
    }
    
    total += entryCost * multiplier;
  });

  return total;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)
 * @param {string} expiresAt - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' (—Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —ç—Ç–æ–≥–æ –¥–Ω—è)
 * @returns {boolean} - true, –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
 */
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —Å–∫–∏–¥–∫–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
 * @param {string} startDate - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å (—Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è >= startDate 00:00:00)
 */
function isDiscountStarted(startDate) {
  if (!startDate) return false;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const now = new Date();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è (00:00:00) –∫ –¥–∞—Ç–µ
  const startDateString = `${startDate}T00:00:00`;

  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
  const startDateObj = new Date(startDateString);

  // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è = UTC+3
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
  const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  const localOffset = now.getTimezoneOffset(); // —Å–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC –≤ –º–∏–Ω—É—Ç–∞—Ö
  const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60 * 1000);

  return moscowTime >= startDateObj;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
 * @param {string} expiresAt - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ (—Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è >= expiresAt 23:59:59)
 */
function isDiscountExpired(expiresAt) {
  if (!expiresAt) return false;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const now = new Date();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –¥–Ω—è (23:59:59) –∫ –¥–∞—Ç–µ
  const expiryDateString = `${expiresAt}T23:59:59`;

  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
  const expiryDate = new Date(expiryDateString);

  // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è = UTC+3
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
  const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  const localOffset = now.getTimezoneOffset(); // —Å–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤–æ—Å—Ç–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤)
  const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60 * 1000);

  return moscowTime >= expiryDate;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
 * @param {Object} discount - –æ–±—ä–µ–∫—Ç —Å–∫–∏–¥–∫–∏ —Å –ø–æ–ª—è–º–∏ startDate –∏ expiresAt
 * @param {string} timestamp - ISO 8601 timestamp (UTC)
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
 */
function wasDiscountActiveAt(discount, timestamp) {
  if (!timestamp) return false;

  const ts = new Date(timestamp);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º startDate
  if (discount.startDate) {
    const startDateString = `${discount.startDate}T00:00:00`;
    const startDateObj = new Date(startDateString);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const localOffset = ts.getTimezoneOffset();
    const tsMoscow = new Date(ts.getTime() + (moscowOffset + localOffset) * 60 * 1000);

    if (tsMoscow < startDateObj) return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º expiresAt
  if (discount.expiresAt) {
    const expiryDateString = `${discount.expiresAt}T23:59:59`;
    const expiryDate = new Date(expiryDateString);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const moscowOffset = 3 * 60; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    const localOffset = ts.getTimezoneOffset();
    const tsMoscow = new Date(ts.getTime() + (moscowOffset + localOffset) * 60 * 1000);

    if (tsMoscow > expiryDate) return false;
  }

  return true;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–∏–¥–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
 * @param {Object} rule - –ø—Ä–∞–≤–∏–ª–æ —Å–∫–∏–¥–∫–∏
 * @param {Array} groups - –º–∞—Å—Å–∏–≤ submissionGroups
 * @returns {Object|null} - –æ–±—ä–µ–∫—Ç —Å discount, calculation, totalItems –∏–ª–∏ null –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞
 */
function calculateDiscountForRule(rule, groups) {
  let { id, title, forms, type, discountValue, condition, startDate, expiresAt } = rule;

  // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 100
  if (type === 'percent' && discountValue > 100) {
    discountValue = 100;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ
  const matchingGroups = groups.filter(g => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    if (g.isDiscount || g.isPriceAdjustment) return false;
    // –î–ª—è 'all' –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (kind === 'expense')
    if (forms === 'all') return g.kind === 'expense';
    return forms.includes(g.templateSelector);
  });

  if (matchingGroups.length === 0) return null;

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  let totalItems = 0;
  matchingGroups.forEach(group => {
    group.entries.forEach(entry => {
      const dataObj = entry.data || {};
      const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
      totalItems += recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;
    });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
  let conditionMet = false;
  if (condition.type === 'none') {
    conditionMet = true;
  } else if (condition.type === 'min_items') {
    conditionMet = totalItems >= condition.value;
  }

  // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º totalItems > 0, —Ç.–∫. —Å—á–∏—Ç–∞–µ–º –ø–æ —Å—É–º–º–∞–º
  if (!conditionMet) return null;
  if (totalItems === 0 && type !== 'percent') return null;

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–∏–¥–∫–∏)
  let operationTotal = 0;
  matchingGroups.forEach(group => {
    const groupCost = calculateGroupCost(group);
    operationTotal += Math.abs(groupCost);
  });

  // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const adjustmentGroup = groups.find(g => g.isPriceAdjustment);
  if (adjustmentGroup) {
    adjustmentGroup.entries.forEach(entry => {
      const adjustmentForm = entry.data?.form;
      if (matchingGroups.some(g => g.templateSelector === adjustmentForm)) {
        const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
        operationTotal -= adjustmentAmount;
      }
    });
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  let discount = 0;
  let calculation = '';

  if (type === 'per_item') {
    // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    discount = discountValue * totalItems;
    calculation = `${discountValue} √ó ${totalItems}`;
  } else if (type === 'per_batch') {
    // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const { batchSize = 1 } = rule;
    const batches = Math.floor(totalItems / batchSize);
    discount = discountValue * batches;
    calculation = `${discountValue} √ó ${batches}`;
  } else if (type === 'fixed') {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
    discount = discountValue;
    calculation = String(discountValue);
  } else if (type === 'percent') {
    // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
    discount = operationTotal * (discountValue / 100);
    // –í—Å–µ–≥–¥–∞ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    discount = Math.ceil(discount);
    calculation = `${formatNumber(operationTotal)} √ó ${discountValue}%`;
  }

  // –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º
  if (discount > operationTotal) {
    discount = operationTotal;
  }

  if (discount <= 0) return null;

  return { discount, calculation, totalItems };
}

export function updateAutoDiscounts() {
  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å–∫–∏–¥–æ–∫
  const discountKey = buildGroupKey({
    templateSelector: FORM_GIFT_DISCOUNT,
    title: TEXT_MESSAGES.AUTO_DISCOUNTS_TITLE,
    amount: '',
    amountLabel: TEXT_MESSAGES.DISCOUNT_LABEL,
    kind: 'income'
  });

  const discountGroupIndex = submissionGroups.findIndex(g => g.key === discountKey);
  const entries = [];
  let totalDiscount = 0;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º —Å–∫–∏–¥–æ–∫
  autoDiscounts.forEach(rule => {
    let { id, title, forms, type, discountValue, condition, startDate, expiresAt } = rule;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ startDate
    if (!startDate) {
      console.warn(`–°–∫–∏–¥–∫–∞ "${title}" (${id}) –ø—Ä–æ–ø—É—â–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ startDate`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∏–¥–∫–∏
    if (!isDiscountStarted(startDate)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞
    if (isDiscountExpired(expiresAt)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–∫–∏–¥–∫—É
    }

    // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 100
    if (type === 'percent' && discountValue > 100) {
      discountValue = 100;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ
    const matchingGroups = submissionGroups.filter(g => {
      // –î–ª—è 'all' –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (kind === 'expense')
      if (forms === 'all') return g.kind === 'expense';
      return forms.includes(g.templateSelector);
    });

    if (matchingGroups.length === 0) return;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let totalItems = 0;
    matchingGroups.forEach(group => {
      group.entries.forEach(entry => {
        const dataObj = entry.data || {};
        const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
        totalItems += recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    let conditionMet = false;
    if (condition.type === 'none') {
      conditionMet = true;
    } else if (condition.type === 'min_items') {
      conditionMet = totalItems >= condition.value;
    }

    // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º totalItems > 0, —Ç.–∫. —Å—á–∏—Ç–∞–µ–º –ø–æ —Å—É–º–º–∞–º
    if (!conditionMet) return;
    if (totalItems === 0 && type !== 'percent') return;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–∏–¥–∫–∏)
    let operationTotal = 0;
    matchingGroups.forEach(group => {
      const groupCost = calculateGroupCost(group);
      operationTotal += Math.abs(groupCost);
    });

    // –í—ã—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
    if (adjustmentGroup) {
      adjustmentGroup.entries.forEach(entry => {
        const adjustmentForm = entry.data?.form;
        if (matchingGroups.some(g => g.templateSelector === adjustmentForm)) {
          const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
          operationTotal -= adjustmentAmount;
        }
      });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let discount = 0;
    let calculation = '';

    if (type === 'per_item') {
      // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
      discount = discountValue * totalItems;
      calculation = `${discountValue} √ó ${totalItems}`;
    } else if (type === 'per_batch') {
      // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const { batchSize = 1 } = rule;
      const batches = Math.floor(totalItems / batchSize);
      discount = discountValue * batches;
      calculation = `${discountValue} √ó ${batches}`;
    } else if (type === 'fixed') {
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
      discount = discountValue;
      calculation = String(discountValue);
    } else if (type === 'percent') {
      // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
      discount = operationTotal * (discountValue / 100);
      // –í—Å–µ–≥–¥–∞ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
      discount = Math.ceil(discount);
      calculation = `${formatNumber(operationTotal)} √ó ${discountValue}%`;
    }

    // –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º
    if (discount > operationTotal) {
      discount = operationTotal;
    }

    if (discount > 0) {
      totalDiscount += discount;
      entries.push({
        id: incrementEntrySeq(),
        template_id: `auto-discount-${id}`,
        data: {
          discount_id: id,
          discount_title: title,
          discount_type: type,
          total_items: totalItems,
          discount_amount: discount,
          calculation,
          startDate: startDate,           // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏
          expiresAt: expiresAt || null    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∏–ª–∏ null –µ—Å–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω–æ)
        },
        multiplier: 1
      });
    }
  });

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –æ–±—â–µ–π —Å–∫–∏–¥–∫–∏)
  let grandTotal = 0;
  submissionGroups.forEach(g => {
    if (g.isDiscount || g.isPriceAdjustment) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    const cost = calculateGroupCost(g);
    grandTotal += Math.abs(cost);
  });

  // –í—ã—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  const adjustmentGroup = submissionGroups.find(g => g.isPriceAdjustment);
  if (adjustmentGroup) {
    adjustmentGroup.entries.forEach(entry => {
      const adjustmentAmount = Number(entry.data?.adjustment_amount) || 0;
      grandTotal -= adjustmentAmount;
    });
  }

  // –û–±—â–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π
  if (totalDiscount > grandTotal) {
    // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≤—Å–µ —Å–∫–∏–¥–∫–∏
    const ratio = grandTotal / totalDiscount;
    entries.forEach(entry => {
      const oldAmount = entry.data.discount_amount;
      entry.data.discount_amount = Math.ceil(oldAmount * ratio);
    });
    totalDiscount = grandTotal;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å–∫–∏–¥–æ–∫
  if (entries.length > 0) {
    if (discountGroupIndex === -1) {
      const newGroup = {
        id: incrementGroupSeq(),
        key: discountKey,
        templateSelector: FORM_GIFT_DISCOUNT,
        title: TEXT_MESSAGES.AUTO_DISCOUNTS_TITLE,
        amount: totalDiscount,
        amountLabel: TEXT_MESSAGES.DISCOUNT_LABEL,
        kind: 'income',
        entries,
        isDiscount: true
      };
      submissionGroups.push(newGroup);
    } else {
      const group = submissionGroups[discountGroupIndex];
      group.amount = totalDiscount;
      group.entries = entries;
    }
  } else if (discountGroupIndex !== -1) {
    submissionGroups.splice(discountGroupIndex, 1);
  }
}

// ============================================================================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –¶–ï–ù
// ============================================================================

export function updateAutoPriceAdjustments() {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  const FORM_PRICE_ADJUSTMENT = '#price-adjustment';
  const ADJUSTMENT_TITLE = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω';
  const ADJUSTMENT_LABEL = '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞';

  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  const adjustmentKey = buildGroupKey({
    templateSelector: FORM_PRICE_ADJUSTMENT,
    title: ADJUSTMENT_TITLE,
    amount: '',
    amountLabel: ADJUSTMENT_LABEL,
    kind: 'expense'
  });

  const adjustmentGroupIndex = submissionGroups.findIndex(g => g.key === adjustmentKey);
  const entries = [];
  let totalAdjustment = 0;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  autoPriceAdjustments.forEach(rule => {
    const { id, title, form, batchSize, newPrice } = rule;

    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï –≥—Ä—É–ø–ø—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–µ
    const targetGroups = submissionGroups.filter(g => g.templateSelector === form);
    if (targetGroups.length === 0) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
    const oldPrice = Number(targetGroups[0].price) || 0;
    if (oldPrice === 0) return;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ –í–°–ï–• –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
    let totalItems = 0;
    targetGroups.forEach(targetGroup => {
      targetGroup.entries.forEach(entry => {
      const dataObj = entry.data || {};

      // –î–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∏–∑ JSON
      const personalPostsJson = dataObj.personal_posts_json;
      const plotPostsJson = dataObj.plot_posts_json;

      if (personalPostsJson) {
        try {
          const posts = JSON.parse(personalPostsJson);
          if (Array.isArray(posts)) {
            totalItems += posts.length;
          }
        } catch (_) {}
      }

      if (plotPostsJson) {
        try {
          const posts = JSON.parse(plotPostsJson);
          if (Array.isArray(posts)) {
            totalItems += posts.length;
          }
        } catch (_) {}
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      if (!personalPostsJson && !plotPostsJson) {
        const recipientKeys = Object.keys(dataObj).filter(k => REGEX.RECIPIENT.test(k));
        totalItems += recipientKeys.filter(key => String(dataObj[key] || '').trim()).length;
      }
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: itemCount >= batchSize
    if (totalItems < batchSize) return;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
    const batches = Math.floor(totalItems / batchSize);
    const batchItems = batches * batchSize;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
    const oldCost = oldPrice * batchItems;
    const newCost = newPrice * batches;
    const adjustment = oldCost - newCost;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
    if (adjustment <= 0) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –í–°–ï–• –æ–ø–µ—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
    let operationTotal = 0;
    targetGroups.forEach(group => {
      operationTotal += Math.abs(calculateGroupCost(group));
    });

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    const finalAdjustment = Math.min(adjustment, operationTotal);

    if (finalAdjustment <= 0) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—á—ë—Ç
    const adjustmentTitle = title.replace('{title}', targetGroups[0].title || '–û–ø–µ—Ä–∞—Ü–∏—è');
    const calculation = `${formatNumber(oldPrice)} √ó ${batches} √ó ${batchSize} ‚àí ${formatNumber(newPrice)} √ó ${batches}`;

    totalAdjustment += finalAdjustment;
    entries.push({
      id: incrementEntrySeq(),
      template_id: `auto-adjustment-${id}`,
      data: {
        adjustment_id: id,
        adjustment_title: adjustmentTitle,
        form: form,
        batch_size: batchSize,
        old_price: oldPrice,
        new_price: newPrice,
        total_items: totalItems,
        batches: batches,
        adjustment_amount: finalAdjustment,
        calculation
      },
      multiplier: 1
    });
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  if (entries.length > 0) {
    if (adjustmentGroupIndex === -1) {
      const newGroup = {
        id: incrementGroupSeq(),
        key: adjustmentKey,
        templateSelector: FORM_PRICE_ADJUSTMENT,
        title: ADJUSTMENT_TITLE,
        amount: totalAdjustment,
        amountLabel: ADJUSTMENT_LABEL,
        kind: 'expense',
        entries,
        isPriceAdjustment: true
      };
      submissionGroups.push(newGroup);
    } else {
      const group = submissionGroups[adjustmentGroupIndex];
      group.amount = totalAdjustment;
      group.entries = entries;
    }
  } else if (adjustmentGroupIndex !== -1) {
    submissionGroups.splice(adjustmentGroupIndex, 1);
  }
}
