// admin_bridge_json.js ‚Äî API bridge –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å JSON
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –ë–ï–ó HTML-–ø—Ä–æ—Å–ª–æ–π–∫–∏

(function () {
  'use strict';

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É /pages/usrN –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ .modal_script
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: data-main-user_id > N –∏–∑ URL
   */
  async function getUserIdFromPage(profileId) {
    try {
      const pageUrl = `/pages/usr${profileId}`;
      const response = await fetch(pageUrl);
      if (!response.ok) {
        console.error(`[admin_bridge_json] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${pageUrl}`);
        return Number(profileId); // fallback –Ω–∞ profileId
      }

      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');

      const modalScript = doc.querySelector('.modal_script');
      if (!modalScript) {
        console.warn(`[admin_bridge_json] .modal_script –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${pageUrl}, –∏—Å–ø–æ–ª—å–∑—É–µ–º profileId=${profileId}`);
        return Number(profileId);
      }

      const mainUserId = modalScript.getAttribute('data-main-user_id');
      if (mainUserId && mainUserId.trim()) {
        return Number(mainUserId.trim());
      }

      // –ï—Å–ª–∏ data-main-user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º profileId
      return Number(profileId);
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', err);
      return Number(profileId);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API (–µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç info_<userId>)
   * –ü–æ–º–µ—á–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç is_visible –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
   * @param {number} userId
   * @param {object} libraryIds - { icon: Set, plashka: Set, ... }
   * @returns {Promise<object>} { visible: { icon: [], ... }, invisible: { icon: [], ... }, chrono: {}, comment_id: null }
   */
  async function loadAllDataFromAPI(userId, libraryIds) {
    const visible = {
      icon: [],
      plashka: [],
      background: [],
      gift: [],
      coupon: []
    };

    const invisible = {
      icon: [],
      plashka: [],
      background: [],
      gift: [],
      coupon: []
    };

    let chrono = {};
    let comment_id = null;

    if (!window.FMVbank || typeof window.FMVbank.storageGet !== 'function') {
      console.error('[admin_bridge_json] FMVbank.storageGet –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { visible, invisible, chrono, comment_id };
    }

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç info_<userId>
      const response = await window.FMVbank.storageGet(userId, 'info_');

      if (!response || typeof response !== 'object') {
        console.warn('[admin_bridge_json] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API –¥–ª—è userId=' + userId);
        return { visible, invisible, chrono, comment_id };
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º chrono –∏ comment_id
      chrono = response.chrono || {};
      comment_id = response.comment_id || null;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–Ω–æ–≤
      const categories = ['icon', 'plashka', 'background', 'gift', 'coupon'];

      for (const key of categories) {
        const items = response[key] || [];
        if (!Array.isArray(items)) continue;

        const libIds = libraryIds[key] || new Set();

        items.forEach(item => {
          const isInLibrary = libIds.has(String(item.id));
          const markedItem = { ...item, is_visible: isInLibrary };

          if (isInLibrary) {
            visible[key].push(markedItem);
          } else {
            invisible[key].push(markedItem);
          }
        });
      }
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    }

    return { visible, invisible, chrono, comment_id };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ API (–µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç info_<userId>)
   * –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç GET, –∑–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
   *
   * @param {number} userId
   * @param {object} visibleData - { icon: [], plashka: [], ... } –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–Ω–µ–ª–∏
   * @param {object} invisibleData - { icon: [], plashka: [], ... } –Ω–µ–≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   * @param {object} existingChrono - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ chrono (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º)
   * @param {number|null} existingCommentId - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π comment_id (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º)
   * @returns {Promise<boolean>}
   */
  async function saveAllDataToAPI(userId, visibleData, invisibleData, existingChrono, existingCommentId) {
    console.log('[admin_bridge_json] üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –î–õ–Ø userId:', userId);
    console.log('[admin_bridge_json] üî• visibleData:', JSON.parse(JSON.stringify(visibleData)));
    console.log('[admin_bridge_json] üî• invisibleData:', JSON.parse(JSON.stringify(invisibleData)));

    if (!window.FMVbank || typeof window.FMVbank.storageGet !== 'function' || typeof window.FMVbank.storageSet !== 'function') {
      console.error('[admin_bridge_json] FMVbank.storageGet –∏–ª–∏ storageSet –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }

    try {
      // –®–ê–ì 1: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      console.log('[admin_bridge_json] üì• –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API...');
      const currentData = await window.FMVbank.storageGet(userId, 'info_');

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      const baseData = currentData && typeof currentData === 'object' ? currentData : {};

      console.log('[admin_bridge_json] üì• –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', JSON.parse(JSON.stringify(baseData)));

      // –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–Ω–æ–≤
      const categories = ['icon', 'plashka', 'background', 'gift', 'coupon'];

      for (const key of categories) {
        // –í–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–Ω–µ–ª–∏ (–ø–æ–º–µ—á–∞–µ–º is_visible: true)
        const visible = (visibleData[key] || []).map(item => ({ ...item, is_visible: true }));

        // –ù–µ–≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—É–∂–µ –ø–æ–º–µ—á–µ–Ω—ã is_visible: false)
        const invisible = invisibleData[key] || [];

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–∏–º—ã–µ, –ø–æ—Ç–æ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ
        const mergedData = [...visible, ...invisible];

        console.log('[admin_bridge_json] üì¶ ' + key + ': ' + mergedData.length + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
        baseData[key] = mergedData;
      }

      // –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º chrono –∏ comment_id (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º, –±–µ—Ä—ë–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
      baseData.chrono = existingChrono || baseData.chrono || {};
      baseData.comment_id = existingCommentId !== undefined ? existingCommentId : (baseData.comment_id || null);

      // –®–ê–ì 4: –û–±–Ω–æ–≤–ª—è–µ–º last_timestamp
      baseData.last_timestamp = Math.floor(Date.now() / 1000);

      console.log('[admin_bridge_json] üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.parse(JSON.stringify(baseData)));

      // –®–ê–ì 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
      const result = await window.FMVbank.storageSet(baseData, userId, 'info_');
      if (!result) {
        console.error('[admin_bridge_json] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        return false;
      }

      console.log('[admin_bridge_json] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      return true;
    } catch (err) {
      console.error('[admin_bridge_json] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
      return false;
    }
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è load
   * @param {string} profileId - id –∏–∑ URL (/profile.php?id=N)
   * @param {object} libraryIds - { icon: Set, plashka: Set, ... }
   * @returns {Promise<object>} { status, visibleData, invisibleData, chrono, comment_id, save, targetUserId }
   */
  async function load(profileId, libraryIds) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É /pages/usrN –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId
    const targetUserId = await getUserIdFromPage(profileId);

    if (!targetUserId) {
      return {
        status: 'error',
        visibleData: {},
        invisibleData: {},
        chrono: {},
        comment_id: null,
        save: null,
        targetUserId: null
      };
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ –ø–æ–º–µ—á–∞–µ–º is_visible
    const { visible, invisible, chrono, comment_id } = await loadAllDataFromAPI(targetUserId, libraryIds);

    /**
     * –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param {object} newVisibleData - { icon: [], plashka: [], ... } –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–Ω–µ–ª–∏
     * @returns {Promise<object>} { ok, status }
     */
    async function save(newVisibleData) {
      const success = await saveAllDataToAPI(targetUserId, newVisibleData, invisible, chrono, comment_id);
      return {
        ok: success,
        status: success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
      };
    }

    return {
      status: 'ok',
      visibleData: visible,
      invisibleData: invisible,
      chrono: chrono,
      comment_id: comment_id,
      save,
      targetUserId
    };
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window.skinAdmin
  window.skinAdmin = { load };
})();
